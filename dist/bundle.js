!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="dist/",t(0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var i=n(1),o=r(i),s=n(6),a=r(s);n(10),new a["default"],o["default"].history.start()},function(e,t,n){var r,i;(function(o){!function(s){var a="object"==typeof self&&self.self===self&&self||"object"==typeof o&&o.global===o&&o;r=[n(2),n(3),t],i=function(e,t,n){a.Backbone=s(a,n,e,t)}.apply(t,r),!(void 0!==i&&(e.exports=i))}(function(e,t,n,r){var i=e.Backbone,o=Array.prototype.slice;t.VERSION="1.2.3",t.$=r,t.noConflict=function(){return e.Backbone=i,this},t.emulateHTTP=!1,t.emulateJSON=!1;var s=function(e,t,r){switch(e){case 1:return function(){return n[t](this[r])};case 2:return function(e){return n[t](this[r],e)};case 3:return function(e,i){return n[t](this[r],c(e,this),i)};case 4:return function(e,i,o){return n[t](this[r],c(e,this),i,o)};default:return function(){var e=o.call(arguments);return e.unshift(this[r]),n[t].apply(n,e)}}},a=function(e,t,r){n.each(t,function(t,i){n[i]&&(e.prototype[i]=s(t,i,r))})},c=function(e,t){return n.isFunction(e)?e:n.isObject(e)&&!t._isModel(e)?u(e):n.isString(e)?function(t){return t.get(e)}:e},u=function(e){var t=n.matches(e);return function(e){return t(e.attributes)}},l=t.Events={},h=/\s+/,f=function(e,t,r,i,o){var s,a=0;if(r&&"object"==typeof r){void 0!==i&&"context"in o&&void 0===o.context&&(o.context=i);for(s=n.keys(r);a<s.length;a++)t=f(e,t,s[a],r[s[a]],o)}else if(r&&h.test(r))for(s=r.split(h);a<s.length;a++)t=e(t,s[a],i,o);else t=e(t,r,i,o);return t};l.on=function(e,t,n){return p(this,e,t,n)};var p=function(e,t,n,r,i){if(e._events=f(d,e._events||{},t,n,{context:r,ctx:e,listening:i}),i){var o=e._listeners||(e._listeners={});o[i.id]=i}return e};l.listenTo=function(e,t,r){if(!e)return this;var i=e._listenId||(e._listenId=n.uniqueId("l")),o=this._listeningTo||(this._listeningTo={}),s=o[i];if(!s){var a=this._listenId||(this._listenId=n.uniqueId("l"));s=o[i]={obj:e,objId:i,id:a,listeningTo:o,count:0}}return p(e,t,r,this,s),this};var d=function(e,t,n,r){if(n){var i=e[t]||(e[t]=[]),o=r.context,s=r.ctx,a=r.listening;a&&a.count++,i.push({callback:n,context:o,ctx:o||s,listening:a})}return e};l.off=function(e,t,n){return this._events?(this._events=f(m,this._events,e,t,{context:n,listeners:this._listeners}),this):this},l.stopListening=function(e,t,r){var i=this._listeningTo;if(!i)return this;for(var o=e?[e._listenId]:n.keys(i),s=0;s<o.length;s++){var a=i[o[s]];if(!a)break;a.obj.off(t,r,this)}return this};var m=function(e,t,r,i){if(e){var o,s=0,a=i.context,c=i.listeners;if(t||r||a){for(var u=t?[t]:n.keys(e);s<u.length;s++){t=u[s];var l=e[t];if(!l)break;for(var h=[],f=0;f<l.length;f++){var p=l[f];r&&r!==p.callback&&r!==p.callback._callback||a&&a!==p.context?h.push(p):(o=p.listening,o&&0===--o.count&&(delete c[o.id],delete o.listeningTo[o.objId]))}h.length?e[t]=h:delete e[t]}return e}for(var d=n.keys(c);s<d.length;s++)o=c[d[s]],delete c[o.id],delete o.listeningTo[o.objId]}};l.once=function(e,t,r){var i=f(g,{},e,t,n.bind(this.off,this));return this.on(i,t,r)},l.listenToOnce=function(e,t,r){var i=f(g,{},t,r,n.bind(this.stopListening,this,e));return this.listenTo(e,i)};var g=function(e,t,r,i){if(r){var o=e[t]=n.once(function(){i(t,o),r.apply(this,arguments)});o._callback=r}return e};l.trigger=function(e){if(!this._events)return this;for(var t=Math.max(0,arguments.length-1),n=Array(t),r=0;t>r;r++)n[r]=arguments[r+1];return f(v,this._events,e,void 0,n),this};var v=function(e,t,n,r){if(e){var i=e[t],o=e.all;i&&o&&(o=o.slice()),i&&y(i,r),o&&y(o,[t].concat(r))}return e},y=function(e,t){var n,r=-1,i=e.length,o=t[0],s=t[1],a=t[2];switch(t.length){case 0:for(;++r<i;)(n=e[r]).callback.call(n.ctx);return;case 1:for(;++r<i;)(n=e[r]).callback.call(n.ctx,o);return;case 2:for(;++r<i;)(n=e[r]).callback.call(n.ctx,o,s);return;case 3:for(;++r<i;)(n=e[r]).callback.call(n.ctx,o,s,a);return;default:for(;++r<i;)(n=e[r]).callback.apply(n.ctx,t);return}};l.bind=l.on,l.unbind=l.off,n.extend(t,l);var b=t.Model=function(e,t){var r=e||{};t||(t={}),this.cid=n.uniqueId(this.cidPrefix),this.attributes={},t.collection&&(this.collection=t.collection),t.parse&&(r=this.parse(r,t)||{});var i=n.result(this,"defaults");r=n.defaults(n.extend({},i,r),i),this.set(r,t),this.changed={},this.initialize.apply(this,arguments)};n.extend(b.prototype,l,{changed:null,validationError:null,idAttribute:"id",cidPrefix:"c",initialize:function(){},toJSON:function(e){return n.clone(this.attributes)},sync:function(){return t.sync.apply(this,arguments)},get:function(e){return this.attributes[e]},escape:function(e){return n.escape(this.get(e))},has:function(e){return null!=this.get(e)},matches:function(e){return!!n.iteratee(e,this)(this.attributes)},set:function(e,t,r){if(null==e)return this;var i;if("object"==typeof e?(i=e,r=t):(i={})[e]=t,r||(r={}),!this._validate(i,r))return!1;var o=r.unset,s=r.silent,a=[],c=this._changing;this._changing=!0,c||(this._previousAttributes=n.clone(this.attributes),this.changed={});var u=this.attributes,l=this.changed,h=this._previousAttributes;for(var f in i)t=i[f],n.isEqual(u[f],t)||a.push(f),n.isEqual(h[f],t)?delete l[f]:l[f]=t,o?delete u[f]:u[f]=t;if(this.idAttribute in i&&(this.id=this.get(this.idAttribute)),!s){a.length&&(this._pending=r);for(var p=0;p<a.length;p++)this.trigger("change:"+a[p],this,u[a[p]],r)}if(c)return this;if(!s)for(;this._pending;)r=this._pending,this._pending=!1,this.trigger("change",this,r);return this._pending=!1,this._changing=!1,this},unset:function(e,t){return this.set(e,void 0,n.extend({},t,{unset:!0}))},clear:function(e){var t={};for(var r in this.attributes)t[r]=void 0;return this.set(t,n.extend({},e,{unset:!0}))},hasChanged:function(e){return null==e?!n.isEmpty(this.changed):n.has(this.changed,e)},changedAttributes:function(e){if(!e)return this.hasChanged()?n.clone(this.changed):!1;var t=this._changing?this._previousAttributes:this.attributes,r={};for(var i in e){var o=e[i];n.isEqual(t[i],o)||(r[i]=o)}return n.size(r)?r:!1},previous:function(e){return null!=e&&this._previousAttributes?this._previousAttributes[e]:null},previousAttributes:function(){return n.clone(this._previousAttributes)},fetch:function(e){e=n.extend({parse:!0},e);var t=this,r=e.success;return e.success=function(n){var i=e.parse?t.parse(n,e):n;return t.set(i,e)?(r&&r.call(e.context,t,n,e),void t.trigger("sync",t,n,e)):!1},$(this,e),this.sync("read",this,e)},save:function(e,t,r){var i;null==e||"object"==typeof e?(i=e,r=t):(i={})[e]=t,r=n.extend({validate:!0,parse:!0},r);var o=r.wait;if(i&&!o){if(!this.set(i,r))return!1}else if(!this._validate(i,r))return!1;var s=this,a=r.success,c=this.attributes;r.success=function(e){s.attributes=c;var t=r.parse?s.parse(e,r):e;return o&&(t=n.extend({},i,t)),t&&!s.set(t,r)?!1:(a&&a.call(r.context,s,e,r),void s.trigger("sync",s,e,r))},$(this,r),i&&o&&(this.attributes=n.extend({},c,i));var u=this.isNew()?"create":r.patch?"patch":"update";"patch"!==u||r.attrs||(r.attrs=i);var l=this.sync(u,this,r);return this.attributes=c,l},destroy:function(e){e=e?n.clone(e):{};var t=this,r=e.success,i=e.wait,o=function(){t.stopListening(),t.trigger("destroy",t,t.collection,e)};e.success=function(n){i&&o(),r&&r.call(e.context,t,n,e),t.isNew()||t.trigger("sync",t,n,e)};var s=!1;return this.isNew()?n.defer(e.success):($(this,e),s=this.sync("delete",this,e)),i||o(),s},url:function(){var e=n.result(this,"urlRoot")||n.result(this.collection,"url")||R();if(this.isNew())return e;var t=this.get(this.idAttribute);return e.replace(/[^\/]$/,"$&/")+encodeURIComponent(t)},parse:function(e,t){return e},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(e){return this._validate({},n.extend({},e,{validate:!0}))},_validate:function(e,t){if(!t.validate||!this.validate)return!0;e=n.extend({},this.attributes,e);var r=this.validationError=this.validate(e,t)||null;return r?(this.trigger("invalid",this,r,n.extend(t,{validationError:r})),!1):!0}});var w={keys:1,values:1,pairs:1,invert:1,pick:0,omit:0,chain:1,isEmpty:1};a(b,w,"attributes");var x=t.Collection=function(e,t){t||(t={}),t.model&&(this.model=t.model),void 0!==t.comparator&&(this.comparator=t.comparator),this._reset(),this.initialize.apply(this,arguments),e&&this.reset(e,n.extend({silent:!0},t))},k={add:!0,remove:!0,merge:!0},T={add:!0,remove:!1},E=function(e,t,n){n=Math.min(Math.max(n,0),e.length);var r,i=Array(e.length-n),o=t.length;for(r=0;r<i.length;r++)i[r]=e[r+n];for(r=0;o>r;r++)e[r+n]=t[r];for(r=0;r<i.length;r++)e[r+o+n]=i[r]};n.extend(x.prototype,l,{model:b,initialize:function(){},toJSON:function(e){return this.map(function(t){return t.toJSON(e)})},sync:function(){return t.sync.apply(this,arguments)},add:function(e,t){return this.set(e,n.extend({merge:!1},t,T))},remove:function(e,t){t=n.extend({},t);var r=!n.isArray(e);e=r?[e]:e.slice();var i=this._removeModels(e,t);return!t.silent&&i.length&&(t.changes={added:[],merged:[],removed:i},this.trigger("update",this,t)),r?i[0]:i},set:function(e,t){if(null!=e){t=n.extend({},k,t),t.parse&&!this._isModel(e)&&(e=this.parse(e,t)||[]);var r=!n.isArray(e);e=r?[e]:e.slice();var i=t.at;null!=i&&(i=+i),i>this.length&&(i=this.length),0>i&&(i+=this.length+1);var o,s,a=[],c=[],u=[],l=[],h={},f=t.add,p=t.merge,d=t.remove,m=!1,g=this.comparator&&null==i&&t.sort!==!1,v=n.isString(this.comparator)?this.comparator:null;for(s=0;s<e.length;s++){o=e[s];var y=this.get(o);if(y){if(p&&o!==y){var b=this._isModel(o)?o.attributes:o;t.parse&&(b=y.parse(b,t)),y.set(b,t),u.push(y),g&&!m&&(m=y.hasChanged(v))}h[y.cid]||(h[y.cid]=!0,a.push(y)),e[s]=y}else f&&(o=e[s]=this._prepareModel(o,t),o&&(c.push(o),this._addReference(o,t),h[o.cid]=!0,a.push(o)))}if(d){for(s=0;s<this.length;s++)o=this.models[s],h[o.cid]||l.push(o);l.length&&this._removeModels(l,t)}var w=!1,x=!g&&f&&d;if(a.length&&x?(w=this.length!==a.length||n.some(this.models,function(e,t){return e!==a[t]}),this.models.length=0,E(this.models,a,0),this.length=this.models.length):c.length&&(g&&(m=!0),E(this.models,c,null==i?this.length:i),this.length=this.models.length),m&&this.sort({silent:!0}),!t.silent){for(s=0;s<c.length;s++)null!=i&&(t.index=i+s),o=c[s],o.trigger("add",o,this,t);(m||w)&&this.trigger("sort",this,t),(c.length||l.length||u.length)&&(t.changes={added:c,removed:l,merged:u},this.trigger("update",this,t))}return r?e[0]:e}},reset:function(e,t){t=t?n.clone(t):{};for(var r=0;r<this.models.length;r++)this._removeReference(this.models[r],t);return t.previousModels=this.models,this._reset(),e=this.add(e,n.extend({silent:!0},t)),t.silent||this.trigger("reset",this,t),e},push:function(e,t){return this.add(e,n.extend({at:this.length},t))},pop:function(e){var t=this.at(this.length-1);return this.remove(t,e)},unshift:function(e,t){return this.add(e,n.extend({at:0},t))},shift:function(e){var t=this.at(0);return this.remove(t,e)},slice:function(){return o.apply(this.models,arguments)},get:function(e){return null!=e?this._byId[e]||this._byId[this.modelId(e.attributes||e)]||e.cid&&this._byId[e.cid]:void 0},has:function(e){return null!=this.get(e)},at:function(e){return 0>e&&(e+=this.length),this.models[e]},where:function(e,t){return this[t?"find":"filter"](e)},findWhere:function(e){return this.where(e,!0)},sort:function(e){var t=this.comparator;if(!t)throw new Error("Cannot sort a set without a comparator");e||(e={});var r=t.length;return n.isFunction(t)&&(t=n.bind(t,this)),1===r||n.isString(t)?this.models=this.sortBy(t):this.models.sort(t),e.silent||this.trigger("sort",this,e),this},pluck:function(e){return this.map(e+"")},fetch:function(e){e=n.extend({parse:!0},e);var t=e.success,r=this;return e.success=function(n){var i=e.reset?"reset":"set";r[i](n,e),t&&t.call(e.context,r,n,e),r.trigger("sync",r,n,e)},$(this,e),this.sync("read",this,e)},create:function(e,t){t=t?n.clone(t):{};var r=t.wait;if(e=this._prepareModel(e,t),!e)return!1;r||this.add(e,t);var i=this,o=t.success;return t.success=function(e,t,n){r&&i.add(e,n),o&&o.call(n.context,e,t,n)},e.save(null,t),e},parse:function(e,t){return e},clone:function(){return new this.constructor(this.models,{model:this.model,comparator:this.comparator})},modelId:function(e){return e[this.model.prototype.idAttribute||"id"]},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(e,t){if(this._isModel(e))return e.collection||(e.collection=this),e;t=t?n.clone(t):{},t.collection=this;var r=new this.model(e,t);return r.validationError?(this.trigger("invalid",this,r.validationError,t),!1):r},_removeModels:function(e,t){for(var n=[],r=0;r<e.length;r++){var i=this.get(e[r]);if(i){var o=this.indexOf(i);this.models.splice(o,1),this.length--,delete this._byId[i.cid];var s=this.modelId(i.attributes);null!=s&&delete this._byId[s],t.silent||(t.index=o,i.trigger("remove",i,this,t)),n.push(i),this._removeReference(i,t)}}return n},_isModel:function(e){return e instanceof b},_addReference:function(e,t){this._byId[e.cid]=e;var n=this.modelId(e.attributes);null!=n&&(this._byId[n]=e),e.on("all",this._onModelEvent,this)},_removeReference:function(e,t){delete this._byId[e.cid];var n=this.modelId(e.attributes);null!=n&&delete this._byId[n],this===e.collection&&delete e.collection,e.off("all",this._onModelEvent,this)},_onModelEvent:function(e,t,n,r){if(t){if(("add"===e||"remove"===e)&&n!==this)return;if("destroy"===e&&this.remove(t,r),"change"===e){var i=this.modelId(t.previousAttributes()),o=this.modelId(t.attributes);i!==o&&(null!=i&&delete this._byId[i],null!=o&&(this._byId[o]=t))}}this.trigger.apply(this,arguments)}});var C={forEach:3,each:3,map:3,collect:3,reduce:0,foldl:0,inject:0,reduceRight:0,foldr:0,find:3,detect:3,filter:3,select:3,reject:3,every:3,all:3,some:3,any:3,include:3,includes:3,contains:3,invoke:0,max:3,min:3,toArray:1,size:1,first:3,head:3,take:3,initial:3,rest:3,tail:3,drop:3,last:3,without:0,difference:0,indexOf:3,shuffle:1,lastIndexOf:3,isEmpty:1,chain:1,sample:3,partition:3,groupBy:3,countBy:3,sortBy:3,indexBy:3,findIndex:3,findLastIndex:3};a(x,C,"models");var _=t.View=function(e){this.cid=n.uniqueId("view"),n.extend(this,n.pick(e,S)),this._ensureElement(),this.initialize.apply(this,arguments)},A=/^(\S+)\s*(.*)$/,S=["model","collection","el","id","attributes","className","tagName","events"];n.extend(_.prototype,l,{tagName:"div",$:function(e){return this.$el.find(e)},initialize:function(){},render:function(){return this},remove:function(){return this._removeElement(),this.stopListening(),this},_removeElement:function(){this.$el.remove()},setElement:function(e){return this.undelegateEvents(),this._setElement(e),this.delegateEvents(),this},_setElement:function(e){this.$el=e instanceof t.$?e:t.$(e),this.el=this.$el[0]},delegateEvents:function(e){if(e||(e=n.result(this,"events")),!e)return this;this.undelegateEvents();for(var t in e){var r=e[t];if(n.isFunction(r)||(r=this[r]),r){var i=t.match(A);this.delegate(i[1],i[2],n.bind(r,this))}}return this},delegate:function(e,t,n){return this.$el.on(e+".delegateEvents"+this.cid,t,n),this},undelegateEvents:function(){return this.$el&&this.$el.off(".delegateEvents"+this.cid),this},undelegate:function(e,t,n){return this.$el.off(e+".delegateEvents"+this.cid,t,n),this},_createElement:function(e){return document.createElement(e)},_ensureElement:function(){if(this.el)this.setElement(n.result(this,"el"));else{var e=n.extend({},n.result(this,"attributes"));this.id&&(e.id=n.result(this,"id")),this.className&&(e["class"]=n.result(this,"className")),this.setElement(this._createElement(n.result(this,"tagName"))),this._setAttributes(e)}},_setAttributes:function(e){this.$el.attr(e)}}),t.sync=function(e,r,i){var o=j[e];n.defaults(i||(i={}),{emulateHTTP:t.emulateHTTP,emulateJSON:t.emulateJSON});var s={type:o,dataType:"json"};if(i.url||(s.url=n.result(r,"url")||R()),null!=i.data||!r||"create"!==e&&"update"!==e&&"patch"!==e||(s.contentType="application/json",s.data=JSON.stringify(i.attrs||r.toJSON(i))),i.emulateJSON&&(s.contentType="application/x-www-form-urlencoded",s.data=s.data?{model:s.data}:{}),i.emulateHTTP&&("PUT"===o||"DELETE"===o||"PATCH"===o)){s.type="POST",i.emulateJSON&&(s.data._method=o);var a=i.beforeSend;i.beforeSend=function(e){return e.setRequestHeader("X-HTTP-Method-Override",o),a?a.apply(this,arguments):void 0}}"GET"===s.type||i.emulateJSON||(s.processData=!1);var c=i.error;i.error=function(e,t,n){i.textStatus=t,i.errorThrown=n,c&&c.call(i.context,e,t,n)};var u=i.xhr=t.ajax(n.extend(s,i));return r.trigger("request",r,u,i),u};var j={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};t.ajax=function(){return t.$.ajax.apply(t.$,arguments)};var O=t.Router=function(e){e||(e={}),e.routes&&(this.routes=e.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},D=/\((.*?)\)/g,I=/(\(\?)?:\w+/g,N=/\*\w+/g,P=/[\-{}\[\]+?.,\\\^$|#\s]/g;n.extend(O.prototype,l,{initialize:function(){},route:function(e,r,i){n.isRegExp(e)||(e=this._routeToRegExp(e)),n.isFunction(r)&&(i=r,r=""),i||(i=this[r]);var o=this;return t.history.route(e,function(n){var s=o._extractParameters(e,n);o.execute(i,s,r)!==!1&&(o.trigger.apply(o,["route:"+r].concat(s)),o.trigger("route",r,s),t.history.trigger("route",o,r,s))}),this},execute:function(e,t,n){e&&e.apply(this,t)},navigate:function(e,n){return t.history.navigate(e,n),this},_bindRoutes:function(){if(this.routes){this.routes=n.result(this,"routes");for(var e,t=n.keys(this.routes);null!=(e=t.pop());)this.route(e,this.routes[e])}},_routeToRegExp:function(e){return e=e.replace(P,"\\$&").replace(D,"(?:$1)?").replace(I,function(e,t){return t?e:"([^/?]+)"}).replace(N,"([^?]*?)"),new RegExp("^"+e+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(e,t){var r=e.exec(t).slice(1);return n.map(r,function(e,t){return t===r.length-1?e||null:e?decodeURIComponent(e):null})}});var M=t.History=function(){this.handlers=[],this.checkUrl=n.bind(this.checkUrl,this),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},F=/^[#\/]|\s+$/g,H=/^\/+|\/+$/g,q=/#.*$/;M.started=!1,n.extend(M.prototype,l,{interval:50,atRoot:function(){var e=this.location.pathname.replace(/[^\/]$/,"$&/");return e===this.root&&!this.getSearch()},matchRoot:function(){var e=this.decodeFragment(this.location.pathname),t=e.slice(0,this.root.length-1)+"/";return t===this.root},decodeFragment:function(e){return decodeURI(e.replace(/%25/g,"%2525"))},getSearch:function(){var e=this.location.href.replace(/#.*/,"").match(/\?.+/);return e?e[0]:""},getHash:function(e){var t=(e||this).location.href.match(/#(.*)$/);return t?t[1]:""},getPath:function(){var e=this.decodeFragment(this.location.pathname+this.getSearch()).slice(this.root.length-1);return"/"===e.charAt(0)?e.slice(1):e},getFragment:function(e){return null==e&&(e=this._usePushState||!this._wantsHashChange?this.getPath():this.getHash()),e.replace(F,"")},start:function(e){if(M.started)throw new Error("Backbone.history has already been started");if(M.started=!0,this.options=n.extend({root:"/"},this.options,e),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._hasHashChange="onhashchange"in window&&(void 0===document.documentMode||document.documentMode>7),this._useHashChange=this._wantsHashChange&&this._hasHashChange,this._wantsPushState=!!this.options.pushState,this._hasPushState=!(!this.history||!this.history.pushState),this._usePushState=this._wantsPushState&&this._hasPushState,this.fragment=this.getFragment(),this.root=("/"+this.root+"/").replace(H,"/"),this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){var t=this.root.slice(0,-1)||"/";return this.location.replace(t+"#"+this.getPath()),!0}this._hasPushState&&this.atRoot()&&this.navigate(this.getHash(),{replace:!0})}if(!this._hasHashChange&&this._wantsHashChange&&!this._usePushState){this.iframe=document.createElement("iframe"),this.iframe.src="javascript:0",this.iframe.style.display="none",this.iframe.tabIndex=-1;var r=document.body,i=r.insertBefore(this.iframe,r.firstChild).contentWindow;i.document.open(),i.document.close(),i.location.hash="#"+this.fragment}var o=window.addEventListener||function(e,t){return attachEvent("on"+e,t)};return this._usePushState?o("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe?o("hashchange",this.checkUrl,!1):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.options.silent?void 0:this.loadUrl()},stop:function(){var e=window.removeEventListener||function(e,t){return detachEvent("on"+e,t)};this._usePushState?e("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe&&e("hashchange",this.checkUrl,!1),this.iframe&&(document.body.removeChild(this.iframe),this.iframe=null),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),M.started=!1},route:function(e,t){this.handlers.unshift({route:e,callback:t})},checkUrl:function(e){var t=this.getFragment();return t===this.fragment&&this.iframe&&(t=this.getHash(this.iframe.contentWindow)),t===this.fragment?!1:(this.iframe&&this.navigate(t),void this.loadUrl())},loadUrl:function(e){return this.matchRoot()?(e=this.fragment=this.getFragment(e),n.some(this.handlers,function(t){return t.route.test(e)?(t.callback(e),!0):void 0})):!1},navigate:function(e,t){if(!M.started)return!1;t&&t!==!0||(t={trigger:!!t}),e=this.getFragment(e||"");var n=this.root;""!==e&&"?"!==e.charAt(0)||(n=n.slice(0,-1)||"/");var r=n+e;if(e=this.decodeFragment(e.replace(q,"")),this.fragment!==e){if(this.fragment=e,this._usePushState)this.history[t.replace?"replaceState":"pushState"]({},document.title,r);else{if(!this._wantsHashChange)return this.location.assign(r);if(this._updateHash(this.location,e,t.replace),this.iframe&&e!==this.getHash(this.iframe.contentWindow)){var i=this.iframe.contentWindow;t.replace||(i.document.open(),i.document.close()),this._updateHash(i.location,e,t.replace)}}return t.trigger?this.loadUrl(e):void 0}},_updateHash:function(e,t,n){if(n){var r=e.href.replace(/(javascript:|#).*$/,"");e.replace(r+"#"+t)}else e.hash="#"+t}}),t.history=new M;var L=function(e,t){var r,i=this;return r=e&&n.has(e,"constructor")?e.constructor:function(){return i.apply(this,arguments)},n.extend(r,i,t),r.prototype=n.create(i.prototype,e),r.prototype.constructor=r,r.__super__=i.prototype,r};b.extend=x.extend=O.extend=_.extend=M.extend=L;var R=function(){throw new Error('A "url" property or function must be specified')},$=function(e,t){var n=t.error;t.error=function(r){n&&n.call(t.context,e,r,t),e.trigger("error",e,r,t)}};return t})}).call(t,function(){return this}())},function(e,t,n){var r,i;(function(){function n(e){function t(t,n,r,i,o,s){for(;o>=0&&s>o;o+=e){var a=i?i[o]:o;r=n(r,t[a],a,t)}return r}return function(n,r,i,o){r=T(r,o,4);var s=!O(n)&&k.keys(n),a=(s||n).length,c=e>0?0:a-1;return arguments.length<3&&(i=n[s?s[c]:c],c+=e),t(n,r,i,s,c,a)}}function o(e){return function(t,n,r){n=E(n,r);for(var i=j(t),o=e>0?0:i-1;o>=0&&i>o;o+=e)if(n(t[o],o,t))return o;return-1}}function s(e,t,n){return function(r,i,o){var s=0,a=j(r);if("number"==typeof o)e>0?s=o>=0?o:Math.max(o+a,s):a=o>=0?Math.min(o+1,a):o+a+1;else if(n&&o&&a)return o=n(r,i),r[o]===i?o:-1;if(i!==i)return o=t(d.call(r,s,a),k.isNaN),o>=0?o+s:-1;for(o=e>0?s:a-1;o>=0&&a>o;o+=e)if(r[o]===i)return o;return-1}}function a(e,t){var n=M.length,r=e.constructor,i=k.isFunction(r)&&r.prototype||h,o="constructor";for(k.has(e,o)&&!k.contains(t,o)&&t.push(o);n--;)o=M[n],o in e&&e[o]!==i[o]&&!k.contains(t,o)&&t.push(o)}var c=this,u=c._,l=Array.prototype,h=Object.prototype,f=Function.prototype,p=l.push,d=l.slice,m=h.toString,g=h.hasOwnProperty,v=Array.isArray,y=Object.keys,b=f.bind,w=Object.create,x=function(){},k=function(e){return e instanceof k?e:this instanceof k?void(this._wrapped=e):new k(e)};"undefined"!=typeof e&&e.exports&&(t=e.exports=k),t._=k,k.VERSION="1.8.3";var T=function(e,t,n){if(void 0===t)return e;switch(null==n?3:n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)};case 4:return function(n,r,i,o){return e.call(t,n,r,i,o)}}return function(){return e.apply(t,arguments)}},E=function(e,t,n){return null==e?k.identity:k.isFunction(e)?T(e,t,n):k.isObject(e)?k.matcher(e):k.property(e)};k.iteratee=function(e,t){return E(e,t,1/0)};var C=function(e,t){return function(n){var r=arguments.length;if(2>r||null==n)return n;for(var i=1;r>i;i++)for(var o=arguments[i],s=e(o),a=s.length,c=0;a>c;c++){var u=s[c];t&&void 0!==n[u]||(n[u]=o[u])}return n}},_=function(e){if(!k.isObject(e))return{};if(w)return w(e);x.prototype=e;var t=new x;return x.prototype=null,t},A=function(e){return function(t){return null==t?void 0:t[e]}},S=Math.pow(2,53)-1,j=A("length"),O=function(e){var t=j(e);return"number"==typeof t&&t>=0&&S>=t};k.each=k.forEach=function(e,t,n){t=T(t,n);var r,i;if(O(e))for(r=0,i=e.length;i>r;r++)t(e[r],r,e);else{var o=k.keys(e);for(r=0,i=o.length;i>r;r++)t(e[o[r]],o[r],e)}return e},k.map=k.collect=function(e,t,n){t=E(t,n);for(var r=!O(e)&&k.keys(e),i=(r||e).length,o=Array(i),s=0;i>s;s++){var a=r?r[s]:s;o[s]=t(e[a],a,e)}return o},k.reduce=k.foldl=k.inject=n(1),k.reduceRight=k.foldr=n(-1),k.find=k.detect=function(e,t,n){var r;return r=O(e)?k.findIndex(e,t,n):k.findKey(e,t,n),void 0!==r&&-1!==r?e[r]:void 0},k.filter=k.select=function(e,t,n){var r=[];return t=E(t,n),k.each(e,function(e,n,i){t(e,n,i)&&r.push(e)}),r},k.reject=function(e,t,n){return k.filter(e,k.negate(E(t)),n)},k.every=k.all=function(e,t,n){t=E(t,n);for(var r=!O(e)&&k.keys(e),i=(r||e).length,o=0;i>o;o++){var s=r?r[o]:o;if(!t(e[s],s,e))return!1}return!0},k.some=k.any=function(e,t,n){t=E(t,n);for(var r=!O(e)&&k.keys(e),i=(r||e).length,o=0;i>o;o++){var s=r?r[o]:o;if(t(e[s],s,e))return!0}return!1},k.contains=k.includes=k.include=function(e,t,n,r){return O(e)||(e=k.values(e)),("number"!=typeof n||r)&&(n=0),k.indexOf(e,t,n)>=0},k.invoke=function(e,t){var n=d.call(arguments,2),r=k.isFunction(t);return k.map(e,function(e){var i=r?t:e[t];return null==i?i:i.apply(e,n)})},k.pluck=function(e,t){return k.map(e,k.property(t))},k.where=function(e,t){return k.filter(e,k.matcher(t))},k.findWhere=function(e,t){return k.find(e,k.matcher(t))},k.max=function(e,t,n){var r,i,o=-(1/0),s=-(1/0);if(null==t&&null!=e){e=O(e)?e:k.values(e);for(var a=0,c=e.length;c>a;a++)r=e[a],r>o&&(o=r)}else t=E(t,n),k.each(e,function(e,n,r){i=t(e,n,r),(i>s||i===-(1/0)&&o===-(1/0))&&(o=e,s=i)});return o},k.min=function(e,t,n){var r,i,o=1/0,s=1/0;if(null==t&&null!=e){e=O(e)?e:k.values(e);for(var a=0,c=e.length;c>a;a++)r=e[a],o>r&&(o=r)}else t=E(t,n),k.each(e,function(e,n,r){i=t(e,n,r),(s>i||i===1/0&&o===1/0)&&(o=e,s=i)});return o},k.shuffle=function(e){for(var t,n=O(e)?e:k.values(e),r=n.length,i=Array(r),o=0;r>o;o++)t=k.random(0,o),t!==o&&(i[o]=i[t]),i[t]=n[o];return i},k.sample=function(e,t,n){return null==t||n?(O(e)||(e=k.values(e)),e[k.random(e.length-1)]):k.shuffle(e).slice(0,Math.max(0,t))},k.sortBy=function(e,t,n){return t=E(t,n),k.pluck(k.map(e,function(e,n,r){return{value:e,index:n,criteria:t(e,n,r)}}).sort(function(e,t){var n=e.criteria,r=t.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(r>n||void 0===r)return-1}return e.index-t.index}),"value")};var D=function(e){return function(t,n,r){var i={};return n=E(n,r),k.each(t,function(r,o){var s=n(r,o,t);e(i,r,s)}),i}};k.groupBy=D(function(e,t,n){k.has(e,n)?e[n].push(t):e[n]=[t]}),k.indexBy=D(function(e,t,n){e[n]=t}),k.countBy=D(function(e,t,n){k.has(e,n)?e[n]++:e[n]=1}),k.toArray=function(e){return e?k.isArray(e)?d.call(e):O(e)?k.map(e,k.identity):k.values(e):[]},k.size=function(e){return null==e?0:O(e)?e.length:k.keys(e).length},k.partition=function(e,t,n){t=E(t,n);var r=[],i=[];return k.each(e,function(e,n,o){(t(e,n,o)?r:i).push(e)}),[r,i]},k.first=k.head=k.take=function(e,t,n){return null!=e?null==t||n?e[0]:k.initial(e,e.length-t):void 0},k.initial=function(e,t,n){return d.call(e,0,Math.max(0,e.length-(null==t||n?1:t)))},k.last=function(e,t,n){return null!=e?null==t||n?e[e.length-1]:k.rest(e,Math.max(0,e.length-t)):void 0},k.rest=k.tail=k.drop=function(e,t,n){return d.call(e,null==t||n?1:t)},k.compact=function(e){return k.filter(e,k.identity)};var I=function(e,t,n,r){for(var i=[],o=0,s=r||0,a=j(e);a>s;s++){var c=e[s];if(O(c)&&(k.isArray(c)||k.isArguments(c))){t||(c=I(c,t,n));var u=0,l=c.length;for(i.length+=l;l>u;)i[o++]=c[u++]}else n||(i[o++]=c)}return i};k.flatten=function(e,t){return I(e,t,!1)},k.without=function(e){return k.difference(e,d.call(arguments,1))},k.uniq=k.unique=function(e,t,n,r){k.isBoolean(t)||(r=n,n=t,t=!1),null!=n&&(n=E(n,r));for(var i=[],o=[],s=0,a=j(e);a>s;s++){var c=e[s],u=n?n(c,s,e):c;t?(s&&o===u||i.push(c),o=u):n?k.contains(o,u)||(o.push(u),i.push(c)):k.contains(i,c)||i.push(c)}return i},k.union=function(){return k.uniq(I(arguments,!0,!0))},k.intersection=function(e){for(var t=[],n=arguments.length,r=0,i=j(e);i>r;r++){var o=e[r];if(!k.contains(t,o)){for(var s=1;n>s&&k.contains(arguments[s],o);s++);s===n&&t.push(o)}}return t},k.difference=function(e){var t=I(arguments,!0,!0,1);return k.filter(e,function(e){return!k.contains(t,e)})},k.zip=function(){return k.unzip(arguments)},k.unzip=function(e){for(var t=e&&k.max(e,j).length||0,n=Array(t),r=0;t>r;r++)n[r]=k.pluck(e,r);return n},k.object=function(e,t){for(var n={},r=0,i=j(e);i>r;r++)t?n[e[r]]=t[r]:n[e[r][0]]=e[r][1];return n},k.findIndex=o(1),k.findLastIndex=o(-1),k.sortedIndex=function(e,t,n,r){n=E(n,r,1);for(var i=n(t),o=0,s=j(e);s>o;){var a=Math.floor((o+s)/2);n(e[a])<i?o=a+1:s=a}return o},k.indexOf=s(1,k.findIndex,k.sortedIndex),k.lastIndexOf=s(-1,k.findLastIndex),k.range=function(e,t,n){null==t&&(t=e||0,e=0),n=n||1;for(var r=Math.max(Math.ceil((t-e)/n),0),i=Array(r),o=0;r>o;o++,e+=n)i[o]=e;return i};var N=function(e,t,n,r,i){if(!(r instanceof t))return e.apply(n,i);var o=_(e.prototype),s=e.apply(o,i);return k.isObject(s)?s:o};k.bind=function(e,t){if(b&&e.bind===b)return b.apply(e,d.call(arguments,1));if(!k.isFunction(e))throw new TypeError("Bind must be called on a function");var n=d.call(arguments,2),r=function(){return N(e,r,t,this,n.concat(d.call(arguments)))};return r},k.partial=function(e){var t=d.call(arguments,1),n=function(){for(var r=0,i=t.length,o=Array(i),s=0;i>s;s++)o[s]=t[s]===k?arguments[r++]:t[s];for(;r<arguments.length;)o.push(arguments[r++]);return N(e,n,this,this,o)};return n},k.bindAll=function(e){var t,n,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(t=1;r>t;t++)n=arguments[t],e[n]=k.bind(e[n],e);return e},k.memoize=function(e,t){var n=function(r){var i=n.cache,o=""+(t?t.apply(this,arguments):r);return k.has(i,o)||(i[o]=e.apply(this,arguments)),i[o]};return n.cache={},n},k.delay=function(e,t){var n=d.call(arguments,2);return setTimeout(function(){return e.apply(null,n)},t)},k.defer=k.partial(k.delay,k,1),k.throttle=function(e,t,n){var r,i,o,s=null,a=0;n||(n={});var c=function(){a=n.leading===!1?0:k.now(),s=null,o=e.apply(r,i),s||(r=i=null)};return function(){var u=k.now();a||n.leading!==!1||(a=u);var l=t-(u-a);return r=this,i=arguments,0>=l||l>t?(s&&(clearTimeout(s),s=null),a=u,o=e.apply(r,i),s||(r=i=null)):s||n.trailing===!1||(s=setTimeout(c,l)),o}},k.debounce=function(e,t,n){var r,i,o,s,a,c=function(){var u=k.now()-s;t>u&&u>=0?r=setTimeout(c,t-u):(r=null,n||(a=e.apply(o,i),r||(o=i=null)))};return function(){o=this,i=arguments,s=k.now();var u=n&&!r;return r||(r=setTimeout(c,t)),u&&(a=e.apply(o,i),o=i=null),a}},k.wrap=function(e,t){return k.partial(t,e)},k.negate=function(e){return function(){return!e.apply(this,arguments)}},k.compose=function(){var e=arguments,t=e.length-1;return function(){for(var n=t,r=e[t].apply(this,arguments);n--;)r=e[n].call(this,r);return r}},k.after=function(e,t){return function(){return--e<1?t.apply(this,arguments):void 0}},k.before=function(e,t){var n;return function(){return--e>0&&(n=t.apply(this,arguments)),1>=e&&(t=null),n}},k.once=k.partial(k.before,2);
var P=!{toString:null}.propertyIsEnumerable("toString"),M=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];k.keys=function(e){if(!k.isObject(e))return[];if(y)return y(e);var t=[];for(var n in e)k.has(e,n)&&t.push(n);return P&&a(e,t),t},k.allKeys=function(e){if(!k.isObject(e))return[];var t=[];for(var n in e)t.push(n);return P&&a(e,t),t},k.values=function(e){for(var t=k.keys(e),n=t.length,r=Array(n),i=0;n>i;i++)r[i]=e[t[i]];return r},k.mapObject=function(e,t,n){t=E(t,n);for(var r,i=k.keys(e),o=i.length,s={},a=0;o>a;a++)r=i[a],s[r]=t(e[r],r,e);return s},k.pairs=function(e){for(var t=k.keys(e),n=t.length,r=Array(n),i=0;n>i;i++)r[i]=[t[i],e[t[i]]];return r},k.invert=function(e){for(var t={},n=k.keys(e),r=0,i=n.length;i>r;r++)t[e[n[r]]]=n[r];return t},k.functions=k.methods=function(e){var t=[];for(var n in e)k.isFunction(e[n])&&t.push(n);return t.sort()},k.extend=C(k.allKeys),k.extendOwn=k.assign=C(k.keys),k.findKey=function(e,t,n){t=E(t,n);for(var r,i=k.keys(e),o=0,s=i.length;s>o;o++)if(r=i[o],t(e[r],r,e))return r},k.pick=function(e,t,n){var r,i,o={},s=e;if(null==s)return o;k.isFunction(t)?(i=k.allKeys(s),r=T(t,n)):(i=I(arguments,!1,!1,1),r=function(e,t,n){return t in n},s=Object(s));for(var a=0,c=i.length;c>a;a++){var u=i[a],l=s[u];r(l,u,s)&&(o[u]=l)}return o},k.omit=function(e,t,n){if(k.isFunction(t))t=k.negate(t);else{var r=k.map(I(arguments,!1,!1,1),String);t=function(e,t){return!k.contains(r,t)}}return k.pick(e,t,n)},k.defaults=C(k.allKeys,!0),k.create=function(e,t){var n=_(e);return t&&k.extendOwn(n,t),n},k.clone=function(e){return k.isObject(e)?k.isArray(e)?e.slice():k.extend({},e):e},k.tap=function(e,t){return t(e),e},k.isMatch=function(e,t){var n=k.keys(t),r=n.length;if(null==e)return!r;for(var i=Object(e),o=0;r>o;o++){var s=n[o];if(t[s]!==i[s]||!(s in i))return!1}return!0};var F=function(e,t,n,r){if(e===t)return 0!==e||1/e===1/t;if(null==e||null==t)return e===t;e instanceof k&&(e=e._wrapped),t instanceof k&&(t=t._wrapped);var i=m.call(e);if(i!==m.call(t))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!==+e?+t!==+t:0===+e?1/+e===1/t:+e===+t;case"[object Date]":case"[object Boolean]":return+e===+t}var o="[object Array]"===i;if(!o){if("object"!=typeof e||"object"!=typeof t)return!1;var s=e.constructor,a=t.constructor;if(s!==a&&!(k.isFunction(s)&&s instanceof s&&k.isFunction(a)&&a instanceof a)&&"constructor"in e&&"constructor"in t)return!1}n=n||[],r=r||[];for(var c=n.length;c--;)if(n[c]===e)return r[c]===t;if(n.push(e),r.push(t),o){if(c=e.length,c!==t.length)return!1;for(;c--;)if(!F(e[c],t[c],n,r))return!1}else{var u,l=k.keys(e);if(c=l.length,k.keys(t).length!==c)return!1;for(;c--;)if(u=l[c],!k.has(t,u)||!F(e[u],t[u],n,r))return!1}return n.pop(),r.pop(),!0};k.isEqual=function(e,t){return F(e,t)},k.isEmpty=function(e){return null==e?!0:O(e)&&(k.isArray(e)||k.isString(e)||k.isArguments(e))?0===e.length:0===k.keys(e).length},k.isElement=function(e){return!(!e||1!==e.nodeType)},k.isArray=v||function(e){return"[object Array]"===m.call(e)},k.isObject=function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},k.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(e){k["is"+e]=function(t){return m.call(t)==="[object "+e+"]"}}),k.isArguments(arguments)||(k.isArguments=function(e){return k.has(e,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(k.isFunction=function(e){return"function"==typeof e||!1}),k.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},k.isNaN=function(e){return k.isNumber(e)&&e!==+e},k.isBoolean=function(e){return e===!0||e===!1||"[object Boolean]"===m.call(e)},k.isNull=function(e){return null===e},k.isUndefined=function(e){return void 0===e},k.has=function(e,t){return null!=e&&g.call(e,t)},k.noConflict=function(){return c._=u,this},k.identity=function(e){return e},k.constant=function(e){return function(){return e}},k.noop=function(){},k.property=A,k.propertyOf=function(e){return null==e?function(){}:function(t){return e[t]}},k.matcher=k.matches=function(e){return e=k.extendOwn({},e),function(t){return k.isMatch(t,e)}},k.times=function(e,t,n){var r=Array(Math.max(0,e));t=T(t,n,1);for(var i=0;e>i;i++)r[i]=t(i);return r},k.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))},k.now=Date.now||function(){return(new Date).getTime()};var H={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},q=k.invert(H),L=function(e){var t=function(t){return e[t]},n="(?:"+k.keys(e).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(e){return e=null==e?"":""+e,r.test(e)?e.replace(i,t):e}};k.escape=L(H),k.unescape=L(q),k.result=function(e,t,n){var r=null==e?void 0:e[t];return void 0===r&&(r=n),k.isFunction(r)?r.call(e):r};var R=0;k.uniqueId=function(e){var t=++R+"";return e?e+t:t},k.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var $=/(.)^/,W={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},B=/\\|'|\r|\n|\u2028|\u2029/g,G=function(e){return"\\"+W[e]};k.template=function(e,t,n){!t&&n&&(t=n),t=k.defaults({},t,k.templateSettings);var r=RegExp([(t.escape||$).source,(t.interpolate||$).source,(t.evaluate||$).source].join("|")+"|$","g"),i=0,o="__p+='";e.replace(r,function(t,n,r,s,a){return o+=e.slice(i,a).replace(B,G),i=a+t.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":s&&(o+="';\n"+s+"\n__p+='"),t}),o+="';\n",t.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var s=new Function(t.variable||"obj","_",o)}catch(a){throw a.source=o,a}var c=function(e){return s.call(this,e,k)},u=t.variable||"obj";return c.source="function("+u+"){\n"+o+"}",c},k.chain=function(e){var t=k(e);return t._chain=!0,t};var z=function(e,t){return e._chain?k(t).chain():t};k.mixin=function(e){k.each(k.functions(e),function(t){var n=k[t]=e[t];k.prototype[t]=function(){var e=[this._wrapped];return p.apply(e,arguments),z(this,n.apply(k,e))}})},k.mixin(k),k.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=l[e];k.prototype[e]=function(){var n=this._wrapped;return t.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0],z(this,n)}}),k.each(["concat","join","slice"],function(e){var t=l[e];k.prototype[e]=function(){return z(this,t.apply(this._wrapped,arguments))}}),k.prototype.value=function(){return this._wrapped},k.prototype.valueOf=k.prototype.toJSON=k.prototype.value,k.prototype.toString=function(){return""+this._wrapped},r=[],i=function(){return k}.apply(t,r),!(void 0!==i&&(e.exports=i))}).call(this)},function(e,t,n){var r,i;/*!
	 * jQuery JavaScript Library v2.2.1
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-02-22T19:11Z
	 */
!function(t,n){"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){function s(e){var t=!!e&&"length"in e&&e.length,n=ue.type(e);return"function"===n||ue.isWindow(e)?!1:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function a(e,t,n){if(ue.isFunction(t))return ue.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return ue.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(be.test(t))return ue.filter(t,e,n);t=ue.filter(t,e)}return ue.grep(e,function(e){return re.call(t,e)>-1!==n})}function c(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function u(e){var t={};return ue.each(e.match(Ce)||[],function(e,n){t[n]=!0}),t}function l(){Z.removeEventListener("DOMContentLoaded",l),n.removeEventListener("load",l),ue.ready()}function h(){this.expando=ue.expando+h.uid++}function f(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Ie,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:De.test(n)?ue.parseJSON(n):n}catch(i){}Oe.set(e,t,n)}else n=void 0;return n}function p(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return ue.css(e,t,"")},c=a(),u=n&&n[3]||(ue.cssNumber[t]?"":"px"),l=(ue.cssNumber[t]||"px"!==u&&+c)&&Pe.exec(ue.css(e,t));if(l&&l[3]!==u){u=u||l[3],n=n||[],l=+c||1;do o=o||".5",l/=o,ue.style(e,t,l+u);while(o!==(o=a()/c)&&1!==o&&--s)}return n&&(l=+l||+c||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=l,r.end=i)),i}function d(e,t){var n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&ue.nodeName(e,t)?ue.merge([e],n):n}function m(e,t){for(var n=0,r=e.length;r>n;n++)je.set(e[n],"globalEval",!t||je.get(t[n],"globalEval"))}function g(e,t,n,r,i){for(var o,s,a,c,u,l,h=t.createDocumentFragment(),f=[],p=0,g=e.length;g>p;p++)if(o=e[p],o||0===o)if("object"===ue.type(o))ue.merge(f,o.nodeType?[o]:o);else if($e.test(o)){for(s=s||h.appendChild(t.createElement("div")),a=(qe.exec(o)||["",""])[1].toLowerCase(),c=Re[a]||Re._default,s.innerHTML=c[1]+ue.htmlPrefilter(o)+c[2],l=c[0];l--;)s=s.lastChild;ue.merge(f,s.childNodes),s=h.firstChild,s.textContent=""}else f.push(t.createTextNode(o));for(h.textContent="",p=0;o=f[p++];)if(r&&ue.inArray(o,r)>-1)i&&i.push(o);else if(u=ue.contains(o.ownerDocument,o),s=d(h.appendChild(o),"script"),u&&m(s),n)for(l=0;o=s[l++];)Le.test(o.type||"")&&n.push(o);return h}function v(){return!0}function y(){return!1}function b(){try{return Z.activeElement}catch(e){}}function w(e,t,n,r,i,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)w(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=y;else if(!i)return e;return 1===o&&(s=i,i=function(e){return ue().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=ue.guid++)),e.each(function(){ue.event.add(this,t,i,r,n)})}function x(e,t){return ue.nodeName(e,"table")&&ue.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function k(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function T(e){var t=Ye.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function E(e,t){var n,r,i,o,s,a,c,u;if(1===t.nodeType){if(je.hasData(e)&&(o=je.access(e),s=je.set(t,o),u=o.events)){delete s.handle,s.events={};for(i in u)for(n=0,r=u[i].length;r>n;n++)ue.event.add(t,i,u[i][n])}Oe.hasData(e)&&(a=Oe.access(e),c=ue.extend({},a),Oe.set(t,c))}}function C(e,t){var n=t.nodeName.toLowerCase();"input"===n&&He.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function _(e,t,n,r){t=te.apply([],t);var i,o,s,a,c,u,l=0,h=e.length,f=h-1,p=t[0],m=ue.isFunction(p);if(m||h>1&&"string"==typeof p&&!ae.checkClone&&Xe.test(p))return e.each(function(i){var o=e.eq(i);m&&(t[0]=p.call(this,i,o.html())),_(o,t,n,r)});if(h&&(i=g(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=ue.map(d(i,"script"),k),a=s.length;h>l;l++)c=i,l!==f&&(c=ue.clone(c,!0,!0),a&&ue.merge(s,d(c,"script"))),n.call(e[l],c,l);if(a)for(u=s[s.length-1].ownerDocument,ue.map(s,T),l=0;a>l;l++)c=s[l],Le.test(c.type||"")&&!je.access(c,"globalEval")&&ue.contains(u,c)&&(c.src?ue._evalUrl&&ue._evalUrl(c.src):ue.globalEval(c.textContent.replace(Ve,"")))}return e}function A(e,t,n){for(var r,i=t?ue.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||ue.cleanData(d(r)),r.parentNode&&(n&&ue.contains(r.ownerDocument,r)&&m(d(r,"script")),r.parentNode.removeChild(r));return e}function S(e,t){var n=ue(t.createElement(e)).appendTo(t.body),r=ue.css(n[0],"display");return n.detach(),r}function j(e){var t=Z,n=Ke[e];return n||(n=S(e,t),"none"!==n&&n||(Je=(Je||ue("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=Je[0].contentDocument,t.write(),t.close(),n=S(e,t),Je.detach()),Ke[e]=n),n}function O(e,t,n){var r,i,o,s,a=e.style;return n=n||et(e),s=n?n.getPropertyValue(t)||n[t]:void 0,""!==s&&void 0!==s||ue.contains(e.ownerDocument,e)||(s=ue.style(e,t)),n&&!ae.pixelMarginRight()&&Ze.test(s)&&Qe.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o),void 0!==s?s+"":s}function D(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function I(e){if(e in at)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=st.length;n--;)if(e=st[n]+t,e in at)return e}function N(e,t,n){var r=Pe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function P(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=ue.css(e,n+Me[o],!0,i)),r?("content"===n&&(s-=ue.css(e,"padding"+Me[o],!0,i)),"margin"!==n&&(s-=ue.css(e,"border"+Me[o]+"Width",!0,i))):(s+=ue.css(e,"padding"+Me[o],!0,i),"padding"!==n&&(s+=ue.css(e,"border"+Me[o]+"Width",!0,i)));return s}function M(e,t,r){var i=!0,o="width"===t?e.offsetWidth:e.offsetHeight,s=et(e),a="border-box"===ue.css(e,"boxSizing",!1,s);if(Z.msFullscreenElement&&n.top!==n&&e.getClientRects().length&&(o=Math.round(100*e.getBoundingClientRect()[t])),0>=o||null==o){if(o=O(e,t,s),(0>o||null==o)&&(o=e.style[t]),Ze.test(o))return o;i=a&&(ae.boxSizingReliable()||o===e.style[t]),o=parseFloat(o)||0}return o+P(e,t,r||(a?"border":"content"),i,s)+"px"}function F(e,t){for(var n,r,i,o=[],s=0,a=e.length;a>s;s++)r=e[s],r.style&&(o[s]=je.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Fe(r)&&(o[s]=je.access(r,"olddisplay",j(r.nodeName)))):(i=Fe(r),"none"===n&&i||je.set(r,"olddisplay",i?n:ue.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function H(e,t,n,r,i){return new H.prototype.init(e,t,n,r,i)}function q(){return n.setTimeout(function(){ct=void 0}),ct=ue.now()}function L(e,t){var n,r=0,i={height:e};for(t=t?1:0;4>r;r+=2-t)n=Me[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function R(e,t,n){for(var r,i=(B.tweeners[t]||[]).concat(B.tweeners["*"]),o=0,s=i.length;s>o;o++)if(r=i[o].call(n,t,e))return r}function $(e,t,n){var r,i,o,s,a,c,u,l,h=this,f={},p=e.style,d=e.nodeType&&Fe(e),m=je.get(e,"fxshow");n.queue||(a=ue._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,c=a.empty.fire,a.empty.fire=function(){a.unqueued||c()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,ue.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],u=ue.css(e,"display"),l="none"===u?je.get(e,"olddisplay")||j(e.nodeName):u,"inline"===l&&"none"===ue.css(e,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],lt.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(d?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;d=!0}f[r]=m&&m[r]||ue.style(e,r)}else u=void 0;if(ue.isEmptyObject(f))"inline"===("none"===u?j(e.nodeName):u)&&(p.display=u);else{m?"hidden"in m&&(d=m.hidden):m=je.access(e,"fxshow",{}),o&&(m.hidden=!d),d?ue(e).show():h.done(function(){ue(e).hide()}),h.done(function(){var t;je.remove(e,"fxshow");for(t in f)ue.style(e,t,f[t])});for(r in f)s=R(d?m[r]:0,r,h),r in m||(m[r]=s.start,d&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function W(e,t){var n,r,i,o,s;for(n in e)if(r=ue.camelCase(n),i=t[r],o=e[n],ue.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=ue.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function B(e,t,n){var r,i,o=0,s=B.prefilters.length,a=ue.Deferred().always(function(){delete c.elem}),c=function(){if(i)return!1;for(var t=ct||q(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,s=0,c=u.tweens.length;c>s;s++)u.tweens[s].run(o);return a.notifyWith(e,[u,o,n]),1>o&&c?n:(a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:ue.extend({},t),opts:ue.extend(!0,{specialEasing:{},easing:ue.easing._default},n),originalProperties:t,originalOptions:n,startTime:ct||q(),duration:n.duration,tweens:[],createTween:function(t,n){var r=ue.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),l=u.props;for(W(l,u.opts.specialEasing);s>o;o++)if(r=B.prefilters[o].call(u,e,l,u.opts))return ue.isFunction(r.stop)&&(ue._queueHooks(u.elem,u.opts.queue).stop=ue.proxy(r.stop,r)),r;return ue.map(l,R,u),ue.isFunction(u.opts.start)&&u.opts.start.call(e,u),ue.fx.timer(ue.extend(c,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function G(e){return e.getAttribute&&e.getAttribute("class")||""}function z(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Ce)||[];if(ue.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function U(e,t,n,r){function i(a){var c;return o[a]=!0,ue.each(e[a]||[],function(e,a){var u=a(t,n,r);return"string"!=typeof u||s||o[u]?s?!(c=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),c}var o={},s=e===jt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function X(e,t){var n,r,i=ue.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&ue.extend(!0,e,r),e}function Y(e,t,n){for(var r,i,o,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){c.unshift(i);break}if(c[0]in n)o=c[0];else{for(i in n){if(!c[0]||e.converters[i+" "+c[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==c[0]&&c.unshift(o),n[o]):void 0}function V(e,t,n,r){var i,o,s,a,c,u={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=o,o=l.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(s=u[c+" "+o]||u["* "+o],!s)for(i in u)if(a=i.split(" "),a[1]===o&&(s=u[c+" "+a[0]]||u["* "+a[0]])){s===!0?s=u[i]:u[i]!==!0&&(o=a[0],l.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(h){return{state:"parsererror",error:s?h:"No conversion from "+c+" to "+o}}}return{state:"success",data:t}}function J(e,t,n,r){var i;if(ue.isArray(t))ue.each(t,function(t,i){n||Nt.test(e)?r(e,i):J(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==ue.type(t))r(e,t);else for(i in t)J(e+"["+i+"]",t[i],n,r)}function K(e){return ue.isWindow(e)?e:9===e.nodeType&&e.defaultView}var Q=[],Z=n.document,ee=Q.slice,te=Q.concat,ne=Q.push,re=Q.indexOf,ie={},oe=ie.toString,se=ie.hasOwnProperty,ae={},ce="2.2.1",ue=function(e,t){return new ue.fn.init(e,t)},le=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,he=/^-ms-/,fe=/-([\da-z])/gi,pe=function(e,t){return t.toUpperCase()};ue.fn=ue.prototype={jquery:ce,constructor:ue,selector:"",length:0,toArray:function(){return ee.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:ee.call(this)},pushStack:function(e){var t=ue.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return ue.each(this,e)},map:function(e){return this.pushStack(ue.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ee.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ne,sort:Q.sort,splice:Q.splice},ue.extend=ue.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||ue.isFunction(s)||(s={}),a===c&&(s=this,a--);c>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(u&&r&&(ue.isPlainObject(r)||(i=ue.isArray(r)))?(i?(i=!1,o=n&&ue.isArray(n)?n:[]):o=n&&ue.isPlainObject(n)?n:{},s[t]=ue.extend(u,o,r)):void 0!==r&&(s[t]=r));return s},ue.extend({expando:"jQuery"+(ce+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ue.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!ue.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){return"object"!==ue.type(e)||e.nodeType||ue.isWindow(e)?!1:!e.constructor||se.call(e.constructor.prototype,"isPrototypeOf")},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ie[oe.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=ue.trim(e),e&&(1===e.indexOf("use strict")?(t=Z.createElement("script"),t.text=e,Z.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(he,"ms-").replace(fe,pe)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,r=0;if(s(e))for(n=e.length;n>r&&t.call(e[r],r,e[r])!==!1;r++);else for(r in e)if(t.call(e[r],r,e[r])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(le,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(s(Object(e))?ue.merge(n,"string"==typeof e?[e]:e):ne.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:re.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;s>o;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,a=[];if(s(e))for(r=e.length;r>o;o++)i=t(e[o],o,n),null!=i&&a.push(i);else for(o in e)i=t(e[o],o,n),null!=i&&a.push(i);return te.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),ue.isFunction(e)?(r=ee.call(arguments,2),i=function(){return e.apply(t||this,r.concat(ee.call(arguments)))},i.guid=e.guid=e.guid||ue.guid++,i):void 0},now:Date.now,support:ae}),"function"==typeof Symbol&&(ue.fn[Symbol.iterator]=Q[Symbol.iterator]),ue.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ie["[object "+t+"]"]=t.toLowerCase()});var de=/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
function(e){function t(e,t,n,r){var i,o,s,a,c,u,h,p,d=t&&t.ownerDocument,m=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==m&&9!==m&&11!==m)return n;if(!r&&((t?t.ownerDocument||t:R)!==I&&D(t),t=t||I,P)){if(11!==m&&(u=ve.exec(e)))if(i=u[1]){if(9===m){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(d&&(s=d.getElementById(i))&&q(t,s)&&s.id===i)return n.push(s),n}else{if(u[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&x.getElementsByClassName&&t.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!z[e+" "]&&(!M||!M.test(e))){if(1!==m)d=t,p=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(be,"\\$&"):t.setAttribute("id",a=L),h=C(e),o=h.length,c=fe.test(a)?"#"+a:"[id='"+a+"']";o--;)h[o]=c+" "+f(h[o]);p=h.join(","),d=ye.test(e)&&l(t.parentNode)||t}if(p)try{return Q.apply(n,d.querySelectorAll(p)),n}catch(g){}finally{a===L&&t.removeAttribute("id")}}}return A(e.replace(ae,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>k.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[L]=!0,e}function i(e){var t=I.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)k.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||X)-(~e.sourceIndex||X);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function c(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function l(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function h(){}function f(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function p(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=W++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,c,u,l=[$,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[L]||(t[L]={}),c=u[t.uniqueID]||(u[t.uniqueID]={}),(a=c[r])&&a[0]===$&&a[1]===o)return l[2]=a[2];if(c[r]=l,l[2]=e(t,n,s))return!0}}}function d(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function g(e,t,n,r,i){for(var o,s=[],a=0,c=e.length,u=null!=t;c>a;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),u&&t.push(a)));return s}function v(e,t,n,i,o,s){return i&&!i[L]&&(i=v(i)),o&&!o[L]&&(o=v(o,s)),r(function(r,s,a,c){var u,l,h,f=[],p=[],d=s.length,v=r||m(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:g(v,f,e,a,c),b=n?o||(r?e:d||i)?[]:s:y;if(n&&n(y,b,a,c),i)for(u=g(b,p),i(u,[],a,c),l=u.length;l--;)(h=u[l])&&(b[p[l]]=!(y[p[l]]=h));if(r){if(o||e){if(o){for(u=[],l=b.length;l--;)(h=b[l])&&u.push(y[l]=h);o(null,b=[],u,c)}for(l=b.length;l--;)(h=b[l])&&(u=o?ee(r,h):f[l])>-1&&(r[u]=!(s[u]=h))}}else b=g(b===s?b.splice(d,b.length):b),o?o(null,s,b,c):Q.apply(s,b)})}function y(e){for(var t,n,r,i=e.length,o=k.relative[e[0].type],s=o||k.relative[" "],a=o?1:0,c=p(function(e){return e===t},s,!0),u=p(function(e){return ee(t,e)>-1},s,!0),l=[function(e,n,r){var i=!o&&(r||n!==S)||((t=n).nodeType?c(e,n,r):u(e,n,r));return t=null,i}];i>a;a++)if(n=k.relative[e[a].type])l=[p(d(l),n)];else{if(n=k.filter[e[a].type].apply(null,e[a].matches),n[L]){for(r=++a;i>r&&!k.relative[e[r].type];r++);return v(a>1&&d(l),a>1&&f(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,r>a&&y(e.slice(a,r)),i>r&&y(e=e.slice(r)),i>r&&f(e))}l.push(n)}return d(l)}function b(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,c,u){var l,h,f,p=0,d="0",m=r&&[],v=[],y=S,b=r||o&&k.find.TAG("*",u),w=$+=null==y?1:Math.random()||.1,x=b.length;for(u&&(S=s===I||s||u);d!==x&&null!=(l=b[d]);d++){if(o&&l){for(h=0,s||l.ownerDocument===I||(D(l),a=!P);f=e[h++];)if(f(l,s||I,a)){c.push(l);break}u&&($=w)}i&&((l=!f&&l)&&p--,r&&m.push(l))}if(p+=d,i&&d!==p){for(h=0;f=n[h++];)f(m,v,s,a);if(r){if(p>0)for(;d--;)m[d]||v[d]||(v[d]=J.call(c));v=g(v)}Q.apply(c,v),u&&!r&&v.length>0&&p+n.length>1&&t.uniqueSort(c)}return u&&($=w,S=y),m};return i?r(s):s}var w,x,k,T,E,C,_,A,S,j,O,D,I,N,P,M,F,H,q,L="sizzle"+1*new Date,R=e.document,$=0,W=0,B=n(),G=n(),z=n(),U=function(e,t){return e===t&&(O=!0),0},X=1<<31,Y={}.hasOwnProperty,V=[],J=V.pop,K=V.push,Q=V.push,Z=V.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ce=new RegExp("^"+ne+"*,"+ne+"*"),ue=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),le=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),he=new RegExp(oe),fe=new RegExp("^"+re+"$"),pe={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},de=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,be=/'|\\/g,we=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),xe=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},ke=function(){D()};try{Q.apply(V=Z.call(R.childNodes),R.childNodes),V[R.childNodes.length].nodeType}catch(Te){Q={apply:V.length?function(e,t){K.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},E=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},D=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:R;return r!==I&&9===r.nodeType&&r.documentElement?(I=r,N=I.documentElement,P=!E(I),(n=I.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",ke,!1):n.attachEvent&&n.attachEvent("onunload",ke)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(I.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=ge.test(I.getElementsByClassName),x.getById=i(function(e){return N.appendChild(e).id=L,!I.getElementsByName||!I.getElementsByName(L).length}),x.getById?(k.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&P){var n=t.getElementById(e);return n?[n]:[]}},k.filter.ID=function(e){var t=e.replace(we,xe);return function(e){return e.getAttribute("id")===t}}):(delete k.find.ID,k.filter.ID=function(e){var t=e.replace(we,xe);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),k.find.TAG=x.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},k.find.CLASS=x.getElementsByClassName&&function(e,t){return"undefined"!=typeof t.getElementsByClassName&&P?t.getElementsByClassName(e):void 0},F=[],M=[],(x.qsa=ge.test(I.querySelectorAll))&&(i(function(e){N.appendChild(e).innerHTML="<a id='"+L+"'></a><select id='"+L+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&M.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||M.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+L+"-]").length||M.push("~="),e.querySelectorAll(":checked").length||M.push(":checked"),e.querySelectorAll("a#"+L+"+*").length||M.push(".#.+[+~]")}),i(function(e){var t=I.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&M.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||M.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),M.push(",.*:")})),(x.matchesSelector=ge.test(H=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&i(function(e){x.disconnectedMatch=H.call(e,"div"),H.call(e,"[s!='']:x"),F.push("!=",oe)}),M=M.length&&new RegExp(M.join("|")),F=F.length&&new RegExp(F.join("|")),t=ge.test(N.compareDocumentPosition),q=t||ge.test(N.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return O=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===I||e.ownerDocument===R&&q(R,e)?-1:t===I||t.ownerDocument===R&&q(R,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return O=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],c=[t];if(!i||!o)return e===I?-1:t===I?1:i?-1:o?1:j?ee(j,e)-ee(j,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)c.unshift(n);for(;a[r]===c[r];)r++;return r?s(a[r],c[r]):a[r]===R?-1:c[r]===R?1:0},I):I},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==I&&D(e),n=n.replace(le,"='$1']"),x.matchesSelector&&P&&!z[n+" "]&&(!F||!F.test(n))&&(!M||!M.test(n)))try{var r=H.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,I,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==I&&D(e),q(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==I&&D(e);var n=k.attrHandle[t.toLowerCase()],r=n&&Y.call(k.attrHandle,t.toLowerCase())?n(e,t,!P):void 0;return void 0!==r?r:x.attributes||!P?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(O=!x.detectDuplicates,j=!x.sortStable&&e.slice(0),e.sort(U),O){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},T=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=T(t);return n},k=t.selectors={cacheLength:50,createPseudo:r,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,xe),e[3]=(e[3]||e[4]||e[5]||"").replace(we,xe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&he.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,xe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=B[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&B(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,c){var u,l,h,f,p,d,m=o!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!c&&!a,b=!1;if(g){if(o){for(;m;){for(f=t;f=f[m];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;d=m="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?g.firstChild:g.lastChild],s&&y){for(f=g,h=f[L]||(f[L]={}),l=h[f.uniqueID]||(h[f.uniqueID]={}),u=l[e]||[],p=u[0]===$&&u[1],b=p&&u[2],f=p&&g.childNodes[p];f=++p&&f&&f[m]||(b=p=0)||d.pop();)if(1===f.nodeType&&++b&&f===t){l[e]=[$,p,b];break}}else if(y&&(f=t,h=f[L]||(f[L]={}),l=h[f.uniqueID]||(h[f.uniqueID]={}),u=l[e]||[],p=u[0]===$&&u[1],b=p),b===!1)for(;(f=++p&&f&&f[m]||(b=p=0)||d.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&(h=f[L]||(f[L]={}),l=h[f.uniqueID]||(h[f.uniqueID]={}),l[e]=[$,b]),f!==t)););return b-=i,b===r||b%r===0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=k.pseudos[e]||k.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[L]?o(n):o.length>1?(i=[e,e,"",n],k.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=_(e.replace(ae,"$1"));return i[L]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(we,xe),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)>-1}}),lang:r(function(e){return fe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,xe).toLowerCase(),function(t){var n;do if(n=P?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===N},focus:function(e){return e===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!k.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return de.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[0>n?n+t:n]}),even:u(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},k.pseudos.nth=k.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})k.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})k.pseudos[w]=c(w);return h.prototype=k.filters=k.pseudos,k.setFilters=new h,C=t.tokenize=function(e,n){var r,i,o,s,a,c,u,l=G[e+" "];if(l)return n?0:l.slice(0);for(a=e,c=[],u=k.preFilter;a;){r&&!(i=ce.exec(a))||(i&&(a=a.slice(i[0].length)||a),c.push(o=[])),r=!1,(i=ue.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ae," ")}),a=a.slice(r.length));for(s in k.filter)!(i=pe[s].exec(a))||u[s]&&!(i=u[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):G(e,c).slice(0)},_=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=C(e)),n=t.length;n--;)o=y(t[n]),o[L]?r.push(o):i.push(o);o=z(e,b(i,r)),o.selector=e}return o},A=t.select=function(e,t,n,r){var i,o,s,a,c,u="function"==typeof e&&e,h=!r&&C(e=u.selector||e);if(n=n||[],1===h.length){if(o=h[0]=h[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&x.getById&&9===t.nodeType&&P&&k.relative[o[1].type]){if(t=(k.find.ID(s.matches[0].replace(we,xe),t)||[])[0],!t)return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=pe.needsContext.test(e)?0:o.length;i--&&(s=o[i],!k.relative[a=s.type]);)if((c=k.find[a])&&(r=c(s.matches[0].replace(we,xe),ye.test(o[0].type)&&l(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&f(o),!e)return Q.apply(n,r),n;break}}return(u||_(e,h))(r,t,!P,n,!t||ye.test(e)&&l(t.parentNode)||t),n},x.sortStable=L.split("").sort(U).join("")===L,x.detectDuplicates=!!O,D(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(I.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(n);ue.find=de,ue.expr=de.selectors,ue.expr[":"]=ue.expr.pseudos,ue.uniqueSort=ue.unique=de.uniqueSort,ue.text=de.getText,ue.isXMLDoc=de.isXML,ue.contains=de.contains;var me=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&ue(e).is(n))break;r.push(e)}return r},ge=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},ve=ue.expr.match.needsContext,ye=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,be=/^.[^:#\[\.,]*$/;ue.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ue.find.matchesSelector(r,e)?[r]:[]:ue.find.matches(e,ue.grep(t,function(e){return 1===e.nodeType}))},ue.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(ue(e).filter(function(){for(t=0;n>t;t++)if(ue.contains(i[t],this))return!0}));for(t=0;n>t;t++)ue.find(e,i[t],r);return r=this.pushStack(n>1?ue.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(a(this,e||[],!1))},not:function(e){return this.pushStack(a(this,e||[],!0))},is:function(e){return!!a(this,"string"==typeof e&&ve.test(e)?ue(e):e||[],!1).length}});var we,xe=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ke=ue.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||we,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:xe.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof ue?t[0]:t,ue.merge(this,ue.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:Z,!0)),ye.test(r[1])&&ue.isPlainObject(t))for(r in t)ue.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=Z.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=Z,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):ue.isFunction(e)?void 0!==n.ready?n.ready(e):e(ue):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),ue.makeArray(e,this))};ke.prototype=ue.fn,we=ue(Z);var Te=/^(?:parents|prev(?:Until|All))/,Ee={children:!0,contents:!0,next:!0,prev:!0};ue.fn.extend({has:function(e){var t=ue(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(ue.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=ve.test(e)||"string"!=typeof e?ue(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&ue.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?ue.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?re.call(ue(e),this[0]):re.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ue.uniqueSort(ue.merge(this.get(),ue(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ue.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return me(e,"parentNode")},parentsUntil:function(e,t,n){return me(e,"parentNode",n)},next:function(e){return c(e,"nextSibling")},prev:function(e){return c(e,"previousSibling")},nextAll:function(e){return me(e,"nextSibling")},prevAll:function(e){return me(e,"previousSibling")},nextUntil:function(e,t,n){return me(e,"nextSibling",n)},prevUntil:function(e,t,n){return me(e,"previousSibling",n)},siblings:function(e){return ge((e.parentNode||{}).firstChild,e)},children:function(e){return ge(e.firstChild)},contents:function(e){return e.contentDocument||ue.merge([],e.childNodes)}},function(e,t){ue.fn[e]=function(n,r){var i=ue.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=ue.filter(r,i)),this.length>1&&(Ee[e]||ue.uniqueSort(i),Te.test(e)&&i.reverse()),this.pushStack(i)}});var Ce=/\S+/g;ue.Callbacks=function(e){e="string"==typeof e?u(e):ue.extend({},e);var t,n,r,i,o=[],s=[],a=-1,c=function(){for(i=e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)o[a].apply(n[0],n[1])===!1&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function r(t){ue.each(t,function(t,n){ue.isFunction(n)?e.unique&&l.has(n)||o.push(n):n&&n.length&&"string"!==ue.type(n)&&r(n)})}(arguments),n&&!t&&c()),this},remove:function(){return ue.each(arguments,function(e,t){for(var n;(n=ue.inArray(t,o,n))>-1;)o.splice(n,1),a>=n&&a--}),this},has:function(e){return e?ue.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},ue.extend({Deferred:function(e){var t=[["resolve","done",ue.Callbacks("once memory"),"resolved"],["reject","fail",ue.Callbacks("once memory"),"rejected"],["notify","progress",ue.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return ue.Deferred(function(n){ue.each(t,function(t,o){var s=ue.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&ue.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?ue.extend(e,r):r}},i={};return r.pipe=r.then,ue.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=ee.call(arguments),s=o.length,a=1!==s||e&&ue.isFunction(e.promise)?s:0,c=1===a?e:ue.Deferred(),u=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?ee.call(arguments):i,r===t?c.notifyWith(n,r):--a||c.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);s>i;i++)o[i]&&ue.isFunction(o[i].promise)?o[i].promise().progress(u(i,n,t)).done(u(i,r,o)).fail(c.reject):--a;return a||c.resolveWith(r,o),c.promise()}});var _e;ue.fn.ready=function(e){return ue.ready.promise().done(e),this},ue.extend({isReady:!1,readyWait:1,holdReady:function(e){e?ue.readyWait++:ue.ready(!0)},ready:function(e){(e===!0?--ue.readyWait:ue.isReady)||(ue.isReady=!0,e!==!0&&--ue.readyWait>0||(_e.resolveWith(Z,[ue]),ue.fn.triggerHandler&&(ue(Z).triggerHandler("ready"),ue(Z).off("ready"))))}}),ue.ready.promise=function(e){return _e||(_e=ue.Deferred(),"complete"===Z.readyState||"loading"!==Z.readyState&&!Z.documentElement.doScroll?n.setTimeout(ue.ready):(Z.addEventListener("DOMContentLoaded",l),n.addEventListener("load",l))),_e.promise(e)},ue.ready.promise();var Ae=function(e,t,n,r,i,o,s){var a=0,c=e.length,u=null==n;if("object"===ue.type(n)){i=!0;for(a in n)Ae(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,ue.isFunction(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(ue(e),n)})),t))for(;c>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):c?t(e[0],n):o},Se=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};h.uid=1,h.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!Se(e))return{};var t=e[this.expando];return t||(t={},Se(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[t]=n;else for(r in t)i[r]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,ue.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{ue.isArray(t)?r=t.concat(t.map(ue.camelCase)):(i=ue.camelCase(t),t in o?r=[t,i]:(r=i,r=r in o?[r]:r.match(Ce)||[])),n=r.length;for(;n--;)delete o[r[n]]}(void 0===t||ue.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ue.isEmptyObject(t)}};var je=new h,Oe=new h,De=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ie=/[A-Z]/g;ue.extend({hasData:function(e){return Oe.hasData(e)||je.hasData(e)},data:function(e,t,n){return Oe.access(e,t,n)},removeData:function(e,t){Oe.remove(e,t)},_data:function(e,t,n){return je.access(e,t,n)},_removeData:function(e,t){je.remove(e,t)}}),ue.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=Oe.get(o),1===o.nodeType&&!je.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=ue.camelCase(r.slice(5)),f(o,r,i[r])));je.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Oe.set(this,e)}):Ae(this,function(t){var n,r;if(o&&void 0===t){if(n=Oe.get(o,e)||Oe.get(o,e.replace(Ie,"-$&").toLowerCase()),void 0!==n)return n;if(r=ue.camelCase(e),n=Oe.get(o,r),void 0!==n)return n;if(n=f(o,r,void 0),void 0!==n)return n}else r=ue.camelCase(e),this.each(function(){var n=Oe.get(this,r);Oe.set(this,r,t),e.indexOf("-")>-1&&void 0!==n&&Oe.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Oe.remove(this,e)})}}),ue.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=je.get(e,t),n&&(!r||ue.isArray(n)?r=je.access(e,t,ue.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=ue.queue(e,t),r=n.length,i=n.shift(),o=ue._queueHooks(e,t),s=function(){ue.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return je.get(e,n)||je.access(e,n,{empty:ue.Callbacks("once memory").add(function(){je.remove(e,[t+"queue",n])})})}}),ue.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ue.queue(this[0],e):void 0===t?this:this.each(function(){var n=ue.queue(this,e,t);ue._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ue.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ue.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=ue.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=je.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var Ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Pe=new RegExp("^(?:([+-])=|)("+Ne+")([a-z%]*)$","i"),Me=["Top","Right","Bottom","Left"],Fe=function(e,t){return e=t||e,"none"===ue.css(e,"display")||!ue.contains(e.ownerDocument,e)},He=/^(?:checkbox|radio)$/i,qe=/<([\w:-]+)/,Le=/^$|\/(?:java|ecma)script/i,Re={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Re.optgroup=Re.option,Re.tbody=Re.tfoot=Re.colgroup=Re.caption=Re.thead,Re.th=Re.td;var $e=/<|&#?\w+;/;!function(){var e=Z.createDocumentFragment(),t=e.appendChild(Z.createElement("div")),n=Z.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),ae.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ae.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var We=/^key/,Be=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ge=/^([^.]*)(?:\.(.+)|)/;ue.event={global:{},add:function(e,t,n,r,i){var o,s,a,c,u,l,h,f,p,d,m,g=je.get(e);if(g)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=ue.guid++),(c=g.events)||(c=g.events={}),(s=g.handle)||(s=g.handle=function(t){return"undefined"!=typeof ue&&ue.event.triggered!==t.type?ue.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Ce)||[""],u=t.length;u--;)a=Ge.exec(t[u])||[],p=m=a[1],d=(a[2]||"").split(".").sort(),p&&(h=ue.event.special[p]||{},p=(i?h.delegateType:h.bindType)||p,h=ue.event.special[p]||{},l=ue.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ue.expr.match.needsContext.test(i),namespace:d.join(".")},o),(f=c[p])||(f=c[p]=[],f.delegateCount=0,h.setup&&h.setup.call(e,r,d,s)!==!1||e.addEventListener&&e.addEventListener(p,s)),h.add&&(h.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,l):f.push(l),ue.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,s,a,c,u,l,h,f,p,d,m,g=je.hasData(e)&&je.get(e);if(g&&(c=g.events)){for(t=(t||"").match(Ce)||[""],u=t.length;u--;)if(a=Ge.exec(t[u])||[],p=m=a[1],d=(a[2]||"").split(".").sort(),p){for(h=ue.event.special[p]||{},p=(r?h.delegateType:h.bindType)||p,f=c[p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)l=f[o],!i&&m!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(f.splice(o,1),
l.selector&&f.delegateCount--,h.remove&&h.remove.call(e,l));s&&!f.length&&(h.teardown&&h.teardown.call(e,d,g.handle)!==!1||ue.removeEvent(e,p,g.handle),delete c[p])}else for(p in c)ue.event.remove(e,p+t[u],n,r,!0);ue.isEmptyObject(c)&&je.remove(e,"handle events")}},dispatch:function(e){e=ue.event.fix(e);var t,n,r,i,o,s=[],a=ee.call(arguments),c=(je.get(this,"events")||{})[e.type]||[],u=ue.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(s=ue.event.handlers.call(this,e,c),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,r=((ue.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,c=e.target;if(a&&c.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&(c.disabled!==!0||"click"!==e.type)){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?ue(i,this).index(c)>-1:ue.find(i,this,null,[c]).length),r[i]&&r.push(o);r.length&&s.push({elem:c,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||Z,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[ue.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=Be.test(i)?this.mouseHooks:We.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new ue.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=Z),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==b()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===b()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&ue.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return ue.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ue.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ue.Event=function(e,t){return this instanceof ue.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?v:y):this.type=e,t&&ue.extend(this,t),this.timeStamp=e&&e.timeStamp||ue.now(),void(this[ue.expando]=!0)):new ue.Event(e,t)},ue.Event.prototype={constructor:ue.Event,isDefaultPrevented:y,isPropagationStopped:y,isImmediatePropagationStopped:y,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=v,e&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=v,e&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=v,e&&e.stopImmediatePropagation(),this.stopPropagation()}},ue.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ue.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||ue.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ue.fn.extend({on:function(e,t,n,r){return w(this,e,t,n,r)},one:function(e,t,n,r){return w(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ue(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=y),this.each(function(){ue.event.remove(this,e,n,t)})}});var ze=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Ue=/<script|<style|<link/i,Xe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ye=/^true\/(.*)/,Ve=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ue.extend({htmlPrefilter:function(e){return e.replace(ze,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),c=ue.contains(e.ownerDocument,e);if(!(ae.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ue.isXMLDoc(e)))for(s=d(a),o=d(e),r=0,i=o.length;i>r;r++)C(o[r],s[r]);if(t)if(n)for(o=o||d(e),s=s||d(a),r=0,i=o.length;i>r;r++)E(o[r],s[r]);else E(e,a);return s=d(a,"script"),s.length>0&&m(s,!c&&d(e,"script")),a},cleanData:function(e){for(var t,n,r,i=ue.event.special,o=0;void 0!==(n=e[o]);o++)if(Se(n)){if(t=n[je.expando]){if(t.events)for(r in t.events)i[r]?ue.event.remove(n,r):ue.removeEvent(n,r,t.handle);n[je.expando]=void 0}n[Oe.expando]&&(n[Oe.expando]=void 0)}}}),ue.fn.extend({domManip:_,detach:function(e){return A(this,e,!0)},remove:function(e){return A(this,e)},text:function(e){return Ae(this,function(e){return void 0===e?ue.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return _(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=x(this,e);t.appendChild(e)}})},prepend:function(){return _(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=x(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return _(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return _(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ue.cleanData(d(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return ue.clone(this,e,t)})},html:function(e){return Ae(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ue.test(e)&&!Re[(qe.exec(e)||["",""])[1].toLowerCase()]){e=ue.htmlPrefilter(e);try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(ue.cleanData(d(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return _(this,arguments,function(t){var n=this.parentNode;ue.inArray(this,e)<0&&(ue.cleanData(d(this)),n&&n.replaceChild(t,this))},e)}}),ue.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ue.fn[e]=function(e){for(var n,r=[],i=ue(e),o=i.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),ue(i[s])[t](n),ne.apply(r,n.get());return this.pushStack(r)}});var Je,Ke={HTML:"block",BODY:"block"},Qe=/^margin/,Ze=new RegExp("^("+Ne+")(?!px)[a-z%]+$","i"),et=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},tt=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},nt=Z.documentElement;!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",nt.appendChild(s);var e=n.getComputedStyle(a);t="1%"!==e.top,o="2px"===e.marginLeft,r="4px"===e.width,a.style.marginRight="50%",i="4px"===e.marginRight,nt.removeChild(s)}var t,r,i,o,s=Z.createElement("div"),a=Z.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",ae.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),ue.extend(ae,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return null==r&&e(),r},pixelMarginRight:function(){return null==r&&e(),i},reliableMarginLeft:function(){return null==r&&e(),o},reliableMarginRight:function(){var e,t=a.appendChild(Z.createElement("div"));return t.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",a.style.width="1px",nt.appendChild(s),e=!parseFloat(n.getComputedStyle(t).marginRight),nt.removeChild(s),a.removeChild(t),e}}))}();var rt=/^(none|table(?!-c[ea]).+)/,it={position:"absolute",visibility:"hidden",display:"block"},ot={letterSpacing:"0",fontWeight:"400"},st=["Webkit","O","Moz","ms"],at=Z.createElement("div").style;ue.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=O(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=ue.camelCase(t),c=e.style;return t=ue.cssProps[a]||(ue.cssProps[a]=I(a)||a),s=ue.cssHooks[t]||ue.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:c[t]:(o=typeof n,"string"===o&&(i=Pe.exec(n))&&i[1]&&(n=p(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(ue.cssNumber[a]?"":"px")),ae.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(c[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=ue.camelCase(t);return t=ue.cssProps[a]||(ue.cssProps[a]=I(a)||a),s=ue.cssHooks[t]||ue.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=O(e,t,r)),"normal"===i&&t in ot&&(i=ot[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),ue.each(["height","width"],function(e,t){ue.cssHooks[t]={get:function(e,n,r){return n?rt.test(ue.css(e,"display"))&&0===e.offsetWidth?tt(e,it,function(){return M(e,t,r)}):M(e,t,r):void 0},set:function(e,n,r){var i,o=r&&et(e),s=r&&P(e,t,r,"border-box"===ue.css(e,"boxSizing",!1,o),o);return s&&(i=Pe.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=ue.css(e,t)),N(e,n,s)}}}),ue.cssHooks.marginLeft=D(ae.reliableMarginLeft,function(e,t){return t?(parseFloat(O(e,"marginLeft"))||e.getBoundingClientRect().left-tt(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px":void 0}),ue.cssHooks.marginRight=D(ae.reliableMarginRight,function(e,t){return t?tt(e,{display:"inline-block"},O,[e,"marginRight"]):void 0}),ue.each({margin:"",padding:"",border:"Width"},function(e,t){ue.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Me[r]+t]=o[r]||o[r-2]||o[0];return i}},Qe.test(e)||(ue.cssHooks[e+t].set=N)}),ue.fn.extend({css:function(e,t){return Ae(this,function(e,t,n){var r,i,o={},s=0;if(ue.isArray(t)){for(r=et(e),i=t.length;i>s;s++)o[t[s]]=ue.css(e,t[s],!1,r);return o}return void 0!==n?ue.style(e,t,n):ue.css(e,t)},e,t,arguments.length>1)},show:function(){return F(this,!0)},hide:function(){return F(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Fe(this)?ue(this).show():ue(this).hide()})}}),ue.Tween=H,H.prototype={constructor:H,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||ue.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ue.cssNumber[n]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,n=H.propHooks[this.prop];return this.options.duration?this.pos=t=ue.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ue.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){ue.fx.step[e.prop]?ue.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ue.cssProps[e.prop]]&&!ue.cssHooks[e.prop]?e.elem[e.prop]=e.now:ue.style(e.elem,e.prop,e.now+e.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ue.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ue.fx=H.prototype.init,ue.fx.step={};var ct,ut,lt=/^(?:toggle|show|hide)$/,ht=/queueHooks$/;ue.Animation=ue.extend(B,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return p(n.elem,e,Pe.exec(t),n),n}]},tweener:function(e,t){ue.isFunction(e)?(t=e,e=["*"]):e=e.match(Ce);for(var n,r=0,i=e.length;i>r;r++)n=e[r],B.tweeners[n]=B.tweeners[n]||[],B.tweeners[n].unshift(t)},prefilters:[$],prefilter:function(e,t){t?B.prefilters.unshift(e):B.prefilters.push(e)}}),ue.speed=function(e,t,n){var r=e&&"object"==typeof e?ue.extend({},e):{complete:n||!n&&t||ue.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ue.isFunction(t)&&t};return r.duration=ue.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in ue.fx.speeds?ue.fx.speeds[r.duration]:ue.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){ue.isFunction(r.old)&&r.old.call(this),r.queue&&ue.dequeue(this,r.queue)},r},ue.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Fe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=ue.isEmptyObject(e),o=ue.speed(t,n,r),s=function(){var t=B(this,ue.extend({},e),o);(i||je.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=ue.timers,s=je.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&ht.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||ue.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=je.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=ue.timers,s=r?r.length:0;for(n.finish=!0,ue.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),ue.each(["toggle","show","hide"],function(e,t){var n=ue.fn[t];ue.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(L(t,!0),e,r,i)}}),ue.each({slideDown:L("show"),slideUp:L("hide"),slideToggle:L("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ue.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),ue.timers=[],ue.fx.tick=function(){var e,t=0,n=ue.timers;for(ct=ue.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||ue.fx.stop(),ct=void 0},ue.fx.timer=function(e){ue.timers.push(e),e()?ue.fx.start():ue.timers.pop()},ue.fx.interval=13,ue.fx.start=function(){ut||(ut=n.setInterval(ue.fx.tick,ue.fx.interval))},ue.fx.stop=function(){n.clearInterval(ut),ut=null},ue.fx.speeds={slow:600,fast:200,_default:400},ue.fn.delay=function(e,t){return e=ue.fx?ue.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=Z.createElement("input"),t=Z.createElement("select"),n=t.appendChild(Z.createElement("option"));e.type="checkbox",ae.checkOn=""!==e.value,ae.optSelected=n.selected,t.disabled=!0,ae.optDisabled=!n.disabled,e=Z.createElement("input"),e.value="t",e.type="radio",ae.radioValue="t"===e.value}();var ft,pt=ue.expr.attrHandle;ue.fn.extend({attr:function(e,t){return Ae(this,ue.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ue.removeAttr(this,e)})}}),ue.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?ue.prop(e,t,n):(1===o&&ue.isXMLDoc(e)||(t=t.toLowerCase(),i=ue.attrHooks[t]||(ue.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void ue.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=ue.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!ae.radioValue&&"radio"===t&&ue.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(Ce);if(o&&1===e.nodeType)for(;n=o[i++];)r=ue.propFix[n]||n,ue.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)}}),ft={set:function(e,t,n){return t===!1?ue.removeAttr(e,n):e.setAttribute(n,n),n}},ue.each(ue.expr.match.bool.source.match(/\w+/g),function(e,t){var n=pt[t]||ue.find.attr;pt[t]=function(e,t,r){var i,o;return r||(o=pt[t],pt[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,pt[t]=o),i}});var dt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;ue.fn.extend({prop:function(e,t){return Ae(this,ue.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ue.propFix[e]||e]})}}),ue.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ue.isXMLDoc(e)||(t=ue.propFix[t]||t,i=ue.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ue.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),ae.optSelected||(ue.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),ue.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ue.propFix[this.toLowerCase()]=this});var gt=/[\t\r\n\f]/g;ue.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,c=0;if(ue.isFunction(e))return this.each(function(t){ue(this).addClass(e.call(this,t,G(this)))});if("string"==typeof e&&e)for(t=e.match(Ce)||[];n=this[c++];)if(i=G(n),r=1===n.nodeType&&(" "+i+" ").replace(gt," ")){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a=ue.trim(r),i!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,c=0;if(ue.isFunction(e))return this.each(function(t){ue(this).removeClass(e.call(this,t,G(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ce)||[];n=this[c++];)if(i=G(n),r=1===n.nodeType&&(" "+i+" ").replace(gt," ")){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");a=ue.trim(r),i!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):ue.isFunction(e)?this.each(function(n){ue(this).toggleClass(e.call(this,n,G(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=ue(this),o=e.match(Ce)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=G(this),t&&je.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":je.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+G(n)+" ").replace(gt," ").indexOf(t)>-1)return!0;return!1}});var vt=/\r/g;ue.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=ue.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,ue(this).val()):e,null==i?i="":"number"==typeof i?i+="":ue.isArray(i)&&(i=ue.map(i,function(e){return null==e?"":e+""})),t=ue.valHooks[this.type]||ue.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=ue.valHooks[i.type]||ue.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(vt,""):null==n?"":n)}}}),ue.extend({valHooks:{option:{get:function(e){return ue.trim(e.value)}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,c=0>i?a:o?i:0;a>c;c++)if(n=r[c],(n.selected||c===i)&&(ae.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ue.nodeName(n.parentNode,"optgroup"))){if(t=ue(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=ue.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=ue.inArray(ue.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),ue.each(["radio","checkbox"],function(){ue.valHooks[this]={set:function(e,t){return ue.isArray(t)?e.checked=ue.inArray(ue(e).val(),t)>-1:void 0}},ae.checkOn||(ue.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var yt=/^(?:focusinfocus|focusoutblur)$/;ue.extend(ue.event,{trigger:function(e,t,r,i){var o,s,a,c,u,l,h,f=[r||Z],p=se.call(e,"type")?e.type:e,d=se.call(e,"namespace")?e.namespace.split("."):[];if(s=a=r=r||Z,3!==r.nodeType&&8!==r.nodeType&&!yt.test(p+ue.event.triggered)&&(p.indexOf(".")>-1&&(d=p.split("."),p=d.shift(),d.sort()),u=p.indexOf(":")<0&&"on"+p,e=e[ue.expando]?e:new ue.Event(p,"object"==typeof e&&e),e.isTrigger=i?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:ue.makeArray(t,[e]),h=ue.event.special[p]||{},i||!h.trigger||h.trigger.apply(r,t)!==!1)){if(!i&&!h.noBubble&&!ue.isWindow(r)){for(c=h.delegateType||p,yt.test(c+p)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(r.ownerDocument||Z)&&f.push(a.defaultView||a.parentWindow||n)}for(o=0;(s=f[o++])&&!e.isPropagationStopped();)e.type=o>1?c:h.bindType||p,l=(je.get(s,"events")||{})[e.type]&&je.get(s,"handle"),l&&l.apply(s,t),l=u&&s[u],l&&l.apply&&Se(s)&&(e.result=l.apply(s,t),e.result===!1&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||h._default&&h._default.apply(f.pop(),t)!==!1||!Se(r)||u&&ue.isFunction(r[p])&&!ue.isWindow(r)&&(a=r[u],a&&(r[u]=null),ue.event.triggered=p,r[p](),ue.event.triggered=void 0,a&&(r[u]=a)),e.result}},simulate:function(e,t,n){var r=ue.extend(new ue.Event,n,{type:e,isSimulated:!0});ue.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}}),ue.fn.extend({trigger:function(e,t){return this.each(function(){ue.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?ue.event.trigger(e,t,n,!0):void 0}}),ue.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){ue.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ue.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),ae.focusin="onfocusin"in n,ae.focusin||ue.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ue.event.simulate(t,e.target,ue.event.fix(e))};ue.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=je.access(r,t);i||r.addEventListener(e,n,!0),je.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=je.access(r,t)-1;i?je.access(r,t,i):(r.removeEventListener(e,n,!0),je.remove(r,t))}}});var bt=n.location,wt=ue.now(),xt=/\?/;ue.parseJSON=function(e){return JSON.parse(e+"")},ue.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(r){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||ue.error("Invalid XML: "+e),t};var kt=/#.*$/,Tt=/([?&])_=[^&]*/,Et=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ct=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,_t=/^(?:GET|HEAD)$/,At=/^\/\//,St={},jt={},Ot="*/".concat("*"),Dt=Z.createElement("a");Dt.href=bt.href,ue.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:bt.href,type:"GET",isLocal:Ct.test(bt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ue.parseJSON,"text xml":ue.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?X(X(e,ue.ajaxSettings),t):X(ue.ajaxSettings,e)},ajaxPrefilter:z(St),ajaxTransport:z(jt),ajax:function(e,t){function r(e,t,r,a){var u,h,y,b,x,T=t;2!==w&&(w=2,c&&n.clearTimeout(c),i=void 0,s=a||"",k.readyState=e>0?4:0,u=e>=200&&300>e||304===e,r&&(b=Y(f,k,r)),b=V(f,b,k,u),u?(f.ifModified&&(x=k.getResponseHeader("Last-Modified"),x&&(ue.lastModified[o]=x),x=k.getResponseHeader("etag"),x&&(ue.etag[o]=x)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=b.state,h=b.data,y=b.error,u=!y)):(y=T,!e&&T||(T="error",0>e&&(e=0))),k.status=e,k.statusText=(t||T)+"",u?m.resolveWith(p,[h,T,k]):m.rejectWith(p,[k,T,y]),k.statusCode(v),v=void 0,l&&d.trigger(u?"ajaxSuccess":"ajaxError",[k,f,u?h:y]),g.fireWith(p,[k,T]),l&&(d.trigger("ajaxComplete",[k,f]),--ue.active||ue.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,o,s,a,c,u,l,h,f=ue.ajaxSetup({},t),p=f.context||f,d=f.context&&(p.nodeType||p.jquery)?ue(p):ue.event,m=ue.Deferred(),g=ue.Callbacks("once memory"),v=f.statusCode||{},y={},b={},w=0,x="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(2===w){if(!a)for(a={};t=Et.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===w?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return w||(e=b[n]=b[n]||e,y[e]=t),this},overrideMimeType:function(e){return w||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>w)for(t in e)v[t]=[v[t],e[t]];else k.always(e[k.status]);return this},abort:function(e){var t=e||x;return i&&i.abort(t),r(0,t),this}};if(m.promise(k).complete=g.add,k.success=k.done,k.error=k.fail,f.url=((e||f.url||bt.href)+"").replace(kt,"").replace(At,bt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=ue.trim(f.dataType||"*").toLowerCase().match(Ce)||[""],null==f.crossDomain){u=Z.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Dt.protocol+"//"+Dt.host!=u.protocol+"//"+u.host}catch(T){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=ue.param(f.data,f.traditional)),U(St,f,t,k),2===w)return k;l=ue.event&&f.global,l&&0===ue.active++&&ue.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!_t.test(f.type),o=f.url,f.hasContent||(f.data&&(o=f.url+=(xt.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=Tt.test(o)?o.replace(Tt,"$1_="+wt++):o+(xt.test(o)?"&":"?")+"_="+wt++)),f.ifModified&&(ue.lastModified[o]&&k.setRequestHeader("If-Modified-Since",ue.lastModified[o]),ue.etag[o]&&k.setRequestHeader("If-None-Match",ue.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||t.contentType)&&k.setRequestHeader("Content-Type",f.contentType),k.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ot+"; q=0.01":""):f.accepts["*"]);for(h in f.headers)k.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(f.beforeSend.call(p,k,f)===!1||2===w))return k.abort();x="abort";for(h in{success:1,error:1,complete:1})k[h](f[h]);if(i=U(jt,f,t,k)){if(k.readyState=1,l&&d.trigger("ajaxSend",[k,f]),2===w)return k;f.async&&f.timeout>0&&(c=n.setTimeout(function(){k.abort("timeout")},f.timeout));try{w=1,i.send(y,r)}catch(T){if(!(2>w))throw T;r(-1,T)}}else r(-1,"No Transport");return k},getJSON:function(e,t,n){return ue.get(e,t,n,"json")},getScript:function(e,t){return ue.get(e,void 0,t,"script")}}),ue.each(["get","post"],function(e,t){ue[t]=function(e,n,r,i){return ue.isFunction(n)&&(i=i||r,r=n,n=void 0),ue.ajax(ue.extend({url:e,type:t,dataType:i,data:n,success:r},ue.isPlainObject(e)&&e))}}),ue._evalUrl=function(e){return ue.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},ue.fn.extend({wrapAll:function(e){var t;return ue.isFunction(e)?this.each(function(t){ue(this).wrapAll(e.call(this,t))}):(this[0]&&(t=ue(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return ue.isFunction(e)?this.each(function(t){ue(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ue(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ue.isFunction(e);return this.each(function(n){ue(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){ue.nodeName(this,"body")||ue(this).replaceWith(this.childNodes)}).end()}}),ue.expr.filters.hidden=function(e){return!ue.expr.filters.visible(e)},ue.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var It=/%20/g,Nt=/\[\]$/,Pt=/\r?\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,Ft=/^(?:input|select|textarea|keygen)/i;ue.param=function(e,t){var n,r=[],i=function(e,t){t=ue.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=ue.ajaxSettings&&ue.ajaxSettings.traditional),ue.isArray(e)||e.jquery&&!ue.isPlainObject(e))ue.each(e,function(){i(this.name,this.value)});else for(n in e)J(n,e[n],t,i);return r.join("&").replace(It,"+")},ue.fn.extend({serialize:function(){return ue.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ue.prop(this,"elements");return e?ue.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ue(this).is(":disabled")&&Ft.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!He.test(e))}).map(function(e,t){var n=ue(this).val();return null==n?null:ue.isArray(n)?ue.map(n,function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}}):{name:t.name,value:n.replace(Pt,"\r\n")}}).get()}}),ue.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},qt=ue.ajaxSettings.xhr();ae.cors=!!qt&&"withCredentials"in qt,ae.ajax=qt=!!qt,ue.ajaxTransport(function(e){var t,r;return ae.cors||qt&&!e.crossDomain?{send:function(i,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)a.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=r=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,
"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ht[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),r=a.onerror=t("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(c){if(t)throw c}},abort:function(){t&&t()}}:void 0}),ue.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ue.globalEval(e),e}}}),ue.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ue.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=ue("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),Z.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Lt=[],Rt=/(=)\?(?=&|$)|\?\?/;ue.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Lt.pop()||ue.expando+"_"+wt++;return this[e]=!0,e}}),ue.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,s,a=e.jsonp!==!1&&(Rt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Rt.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(i=e.jsonpCallback=ue.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Rt,"$1"+i):e.jsonp!==!1&&(e.url+=(xt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||ue.error(i+" was not called"),s[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){s=arguments},r.always(function(){void 0===o?ue(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Lt.push(i)),s&&ue.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),ae.createHTMLDocument=function(){var e=Z.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),ue.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||(ae.createHTMLDocument?Z.implementation.createHTMLDocument(""):Z);var r=ye.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=g([e],t,i),i&&i.length&&ue(i).remove(),ue.merge([],r.childNodes))};var $t=ue.fn.load;ue.fn.load=function(e,t,n){if("string"!=typeof e&&$t)return $t.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=ue.trim(e.slice(a)),e=e.slice(0,a)),ue.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&ue.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?ue("<div>").append(ue.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(s,o||[e.responseText,t,e])})}),this},ue.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ue.fn[t]=function(e){return this.on(t,e)}}),ue.expr.filters.animated=function(e){return ue.grep(ue.timers,function(t){return e===t.elem}).length},ue.offset={setOffset:function(e,t,n){var r,i,o,s,a,c,u,l=ue.css(e,"position"),h=ue(e),f={};"static"===l&&(e.style.position="relative"),a=h.offset(),o=ue.css(e,"top"),c=ue.css(e,"left"),u=("absolute"===l||"fixed"===l)&&(o+c).indexOf("auto")>-1,u?(r=h.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(c)||0),ue.isFunction(t)&&(t=t.call(e,n,ue.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),"using"in t?t.using.call(e,f):h.css(f)}},ue.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ue.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,ue.contains(t,r)?(i=r.getBoundingClientRect(),n=K(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===ue.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),ue.nodeName(e[0],"html")||(r=e.offset()),r.top+=ue.css(e[0],"borderTopWidth",!0),r.left+=ue.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-ue.css(n,"marginTop",!0),left:t.left-r.left-ue.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ue.css(e,"position");)e=e.offsetParent;return e||nt})}}),ue.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;ue.fn[e]=function(r){return Ae(this,function(e,r,i){var o=K(e);return void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),ue.each(["top","left"],function(e,t){ue.cssHooks[t]=D(ae.pixelPosition,function(e,n){return n?(n=O(e,t),Ze.test(n)?ue(e).position()[t]+"px":n):void 0})}),ue.each({Height:"height",Width:"width"},function(e,t){ue.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){ue.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return Ae(this,function(t,n,r){var i;return ue.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?ue.css(t,n,s):ue.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),ue.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),ue.fn.andSelf=ue.fn.addBack,r=[],i=function(){return ue}.apply(t,r),!(void 0!==i&&(e.exports=i));var Wt=n.jQuery,Bt=n.$;return ue.noConflict=function(e){return n.$===ue&&(n.$=Bt),e&&n.jQuery===ue&&(n.jQuery=Wt),ue},o||(n.jQuery=n.$=ue),ue})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),u=r(c),l=n(2),h=r(l),f=n(5),p=r(f),d=function(e){function t(e){i(this,t);var n=o(this,Object.getPrototypeOf(t).call(this,e));return n.model=p["default"],n}return s(t,e),a(t,[{key:"getUnviewedEntryID",value:function(){var e=this.where({viewed:!1});return e.length>0?h["default"].sample(e).get("id"):(this.each(function(e){e.set("viewed",!1)}),this.sample().get("id"))}}]),t}(u["default"].Collection);t["default"]=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),u=r(c),l=function(e){function t(e){i(this,t);var n=o(this,Object.getPrototypeOf(t).call(this,e));return n.set({urlFriendlyTitle:n.convertToSlug(n.get("title"))}),n.parseTitle(),n}return s(t,e),a(t,[{key:"defaults",value:function(){return{viewed:!1}}},{key:"validate",value:function(e){return e&&""!==e.title&&""!==e.description?void 0:"The model must have a title and a description."}},{key:"parseTitle",value:function(){this.titleContainsParenthesis(this.get("title"))&&this.set("title",this.wrapTitleParenthesisInSpans(this.get("title")))}},{key:"convertToSlug",value:function(e){return e.toLowerCase().replace(/[^\w ]+/g,"").replace(/ +/g,"-")}},{key:"titleContainsParenthesis",value:function(e){return e.indexOf("(")>-1||e.indexOf(")")>-1}},{key:"wrapTitleParenthesisInSpans",value:function(e){return e.replace("(","<span>(").replace(")",")</span>")}}]),t}(u["default"].Model);t["default"]=l},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),u=r(c),l=n(3),h=r(l),f=n(2),p=r(f),d=n(9),m=r(d),g=n(4),v=r(g),y=n(7),b=r(y),w=n(8),x=r(w),k=n(12),T=r(k),E=function(e){function t(){i(this,t);var e=o(this,Object.getPrototypeOf(t).call(this));e.routes={"entry/:id(/:title)":"showEntry","*actions":"showRandomEntry"},e._bindRoutes(),e.initialFragment=null,e.$entryEl=(0,h["default"])("#entry"),e.loader=new m["default"],e.entriesData=JSON.parse(T["default"]),e.entries=new v["default"],e.entries.add(e.entriesData);var n=new b["default"]({collection:e.entries});return e.listenTo(n,"routeToUnviewedEntry",e.showEntry),e.listenTo(n,"navigateBackwards",e.navigateBackwards),e}return s(t,e),a(t,[{key:"showRandomEntry",value:function(){var e=this.entries.getUnviewedEntryID();this.showEntry(e)}},{key:"showEntry",value:function(e){this.loader.$el.is(":visible")&&this.loader.trigger("hide");var t=this.entries.findWhere({id:parseInt(e)});return p["default"].isUndefined(t)?void this.showRandomEntry():(this.navigate("entry/"+e+"/"+t.get("urlFriendlyTitle"),{trigger:!0}),this.initialFragment||(this.initialFragment=u["default"].history.getFragment()),void(this.entryView=new x["default"]({model:t,container:this.$entryEl}).render()))}},{key:"navigateBackwards",value:function(){this.initialFragment!==u["default"].history.getFragment()&&window.history.back()}}]),t}(u["default"].Router);t["default"]=E},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),u=r(c),l=n(3),h=r(l),f=n(2),p=r(f),d=n(11),m=r(d),g=function(e){function t(e){return i(this,t),o(this,Object.getPrototypeOf(t).call(this,{el:"body",collection:e.collection,events:{click:"renderRandomEntry",keydown:"handleKeyboardEvent"}}))}return s(t,e),a(t,[{key:"initialize",value:function(){var e=new m["default"](this.$el.get(0));e.on("swiperight swipeleft",this.handleMobileEvent)}},{key:"renderRandomEntry",value:function(e){if(!e||!(0,h["default"])(e.target).is("a")){var t=this.collection.getUnviewedEntryID();this.trigger("routeToUnviewedEntry",t)}}},{key:"handleKeyboardEvent",value:function(e){e.preventDefault();var t=[37,72],n=[39,76],r=[32];if(p["default"].contains(p["default"].union(t,n,r),e.keyCode)){var i=p["default"].contains(n,e.keyCode)||r===e.keyCode&&!e.shiftKey;this.moveToEntry(i)}}},{key:"handleMobileEvent",value:function(e){e.preventDefault();var t="swipeleft"===e.type;this.moveToEntry(t)}},{key:"moveToEntry",value:function(e){e?this.renderRandomEntry():this.trigger("navigateBackwards")}}]),t}(u["default"].View);t["default"]=g},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),u=r(c),l=n(3),h=r(l),f=n(2),p=r(f),d=n(13),m=r(d),g=function(e){function t(e){i(this,t);var n=o(this,Object.getPrototypeOf(t).call(this,{el:"#entry",model:e.model,container:e.container,events:{"click .social-links a":"socialShare"}}));return n.template=p["default"].template(m["default"]),n}return s(t,e),a(t,[{key:"initialize",value:function(e){this.listenTo(this.model,"change",this.render),this.CSSanimationClasses="flipInX animated",this.container=e.container,this.animateView()}},{key:"render",value:function(){return this.model.set("viewed",!0),this.$el.html(this.template(this.model.toJSON())),this}},{key:"animateView",value:function(){this.container.addClass(this.CSSanimationClasses)}},{key:"socialShare",value:function(e){e.preventDefault();var t=575,n=400,r=((0,h["default"])(window).width()-t)/2,i=((0,h["default"])(window).height()-n)/2,o=(0,h["default"])(e.target).attr("href"),s="status=1,width="+t+",height="+n+",top="+i+",left="+r;window.open(o,"Share",s)}}]),t}(u["default"].View);t["default"]=g},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),u=r(c),l=function(e){function t(){return i(this,t),o(this,Object.getPrototypeOf(t).call(this,{el:".loader"}))}return s(t,e),a(t,[{key:"initialize",value:function(){var e=this;this.listenTo(this,"hide",function(){e.$el.hide()})}}]),t}(u["default"].View);t["default"]=l},function(e,t){},function(e,t,n){var r;/*! Hammer.JS - v2.0.6 - 2015-12-23
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2015 Jorik Tangelder;
	 * Licensed under the  license */
!function(i,o,s,a){"use strict";function c(e,t,n){return setTimeout(p(e,n),t)}function u(e,t,n){return Array.isArray(e)?(l(e,n[t],n),!0):!1}function l(e,t,n){var r;if(e)if(e.forEach)e.forEach(t,n);else if(e.length!==a)for(r=0;r<e.length;)t.call(n,e[r],r,e),r++;else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e)}function h(e,t,n){var r="DEPRECATED METHOD: "+t+"\n"+n+" AT \n";return function(){var t=new Error("get-stack-trace"),n=t&&t.stack?t.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=i.console&&(i.console.warn||i.console.log);return o&&o.call(i.console,r,n),e.apply(this,arguments)}}function f(e,t,n){var r,i=t.prototype;r=e.prototype=Object.create(i),r.constructor=e,r._super=i,n&&he(r,n)}function p(e,t){return function(){return e.apply(t,arguments)}}function d(e,t){return typeof e==de?e.apply(t?t[0]||a:a,t):e}function m(e,t){return e===a?t:e}function g(e,t,n){l(w(t),function(t){e.addEventListener(t,n,!1)})}function v(e,t,n){l(w(t),function(t){e.removeEventListener(t,n,!1)})}function y(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function b(e,t){return e.indexOf(t)>-1}function w(e){return e.trim().split(/\s+/g)}function x(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var r=0;r<e.length;){if(n&&e[r][n]==t||!n&&e[r]===t)return r;r++}return-1}function k(e){return Array.prototype.slice.call(e,0)}function T(e,t,n){for(var r=[],i=[],o=0;o<e.length;){var s=t?e[o][t]:e[o];x(i,s)<0&&r.push(e[o]),i[o]=s,o++}return n&&(r=t?r.sort(function(e,n){return e[t]>n[t]}):r.sort()),r}function E(e,t){for(var n,r,i=t[0].toUpperCase()+t.slice(1),o=0;o<fe.length;){if(n=fe[o],r=n?n+i:t,r in e)return r;o++}return a}function C(){return we++}function _(e){var t=e.ownerDocument||e;return t.defaultView||t.parentWindow||i}function A(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){d(e.options.enable,[e])&&n.handler(t)},this.init()}function S(e){var t,n=e.options.inputClass;return new(t=n?n:Te?W:Ee?z:ke?X:$)(e,j)}function j(e,t,n){var r=n.pointers.length,i=n.changedPointers.length,o=t&Oe&&r-i===0,s=t&(Ie|Ne)&&r-i===0;n.isFirst=!!o,n.isFinal=!!s,o&&(e.session={}),n.eventType=t,O(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function O(e,t){var n=e.session,r=t.pointers,i=r.length;n.firstInput||(n.firstInput=N(t)),i>1&&!n.firstMultiple?n.firstMultiple=N(t):1===i&&(n.firstMultiple=!1);var o=n.firstInput,s=n.firstMultiple,a=s?s.center:o.center,c=t.center=P(r);t.timeStamp=ve(),t.deltaTime=t.timeStamp-o.timeStamp,t.angle=q(a,c),t.distance=H(a,c),D(n,t),t.offsetDirection=F(t.deltaX,t.deltaY);var u=M(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=u.x,t.overallVelocityY=u.y,t.overallVelocity=ge(u.x)>ge(u.y)?u.x:u.y,t.scale=s?R(s.pointers,r):1,t.rotation=s?L(s.pointers,r):0,t.maxPointers=n.prevInput?t.pointers.length>n.prevInput.maxPointers?t.pointers.length:n.prevInput.maxPointers:t.pointers.length,I(n,t);var l=e.element;y(t.srcEvent.target,l)&&(l=t.srcEvent.target),t.target=l}function D(e,t){var n=t.center,r=e.offsetDelta||{},i=e.prevDelta||{},o=e.prevInput||{};t.eventType!==Oe&&o.eventType!==Ie||(i=e.prevDelta={x:o.deltaX||0,y:o.deltaY||0},r=e.offsetDelta={x:n.x,y:n.y}),t.deltaX=i.x+(n.x-r.x),t.deltaY=i.y+(n.y-r.y)}function I(e,t){var n,r,i,o,s=e.lastInterval||t,c=t.timeStamp-s.timeStamp;if(t.eventType!=Ne&&(c>je||s.velocity===a)){var u=t.deltaX-s.deltaX,l=t.deltaY-s.deltaY,h=M(c,u,l);r=h.x,i=h.y,n=ge(h.x)>ge(h.y)?h.x:h.y,o=F(u,l),e.lastInterval=t}else n=s.velocity,r=s.velocityX,i=s.velocityY,o=s.direction;t.velocity=n,t.velocityX=r,t.velocityY=i,t.direction=o}function N(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:me(e.pointers[n].clientX),clientY:me(e.pointers[n].clientY)},n++;return{timeStamp:ve(),pointers:t,center:P(t),deltaX:e.deltaX,deltaY:e.deltaY}}function P(e){var t=e.length;if(1===t)return{x:me(e[0].clientX),y:me(e[0].clientY)};for(var n=0,r=0,i=0;t>i;)n+=e[i].clientX,r+=e[i].clientY,i++;return{x:me(n/t),y:me(r/t)}}function M(e,t,n){return{x:t/e||0,y:n/e||0}}function F(e,t){return e===t?Pe:ge(e)>=ge(t)?0>e?Me:Fe:0>t?He:qe}function H(e,t,n){n||(n=We);var r=t[n[0]]-e[n[0]],i=t[n[1]]-e[n[1]];return Math.sqrt(r*r+i*i)}function q(e,t,n){n||(n=We);var r=t[n[0]]-e[n[0]],i=t[n[1]]-e[n[1]];return 180*Math.atan2(i,r)/Math.PI}function L(e,t){return q(t[1],t[0],Be)+q(e[1],e[0],Be)}function R(e,t){return H(t[0],t[1],Be)/H(e[0],e[1],Be)}function $(){this.evEl=ze,this.evWin=Ue,this.allow=!0,this.pressed=!1,A.apply(this,arguments)}function W(){this.evEl=Ve,this.evWin=Je,A.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function B(){this.evTarget=Qe,this.evWin=Ze,this.started=!1,A.apply(this,arguments)}function G(e,t){var n=k(e.touches),r=k(e.changedTouches);return t&(Ie|Ne)&&(n=T(n.concat(r),"identifier",!0)),[n,r]}function z(){this.evTarget=tt,this.targetIds={},A.apply(this,arguments)}function U(e,t){var n=k(e.touches),r=this.targetIds;if(t&(Oe|De)&&1===n.length)return r[n[0].identifier]=!0,[n,n];var i,o,s=k(e.changedTouches),a=[],c=this.target;if(o=n.filter(function(e){return y(e.target,c)}),t===Oe)for(i=0;i<o.length;)r[o[i].identifier]=!0,i++;for(i=0;i<s.length;)r[s[i].identifier]&&a.push(s[i]),t&(Ie|Ne)&&delete r[s[i].identifier],i++;return a.length?[T(o.concat(a),"identifier",!0),a]:void 0}function X(){A.apply(this,arguments);var e=p(this.handler,this);this.touch=new z(this.manager,e),this.mouse=new $(this.manager,e)}function Y(e,t){this.manager=e,this.set(t)}function V(e){if(b(e,at))return at;var t=b(e,ct),n=b(e,ut);return t&&n?at:t||n?t?ct:ut:b(e,st)?st:ot}function J(e){this.options=he({},this.defaults,e||{}),this.id=C(),this.manager=null,this.options.enable=m(this.options.enable,!0),this.state=lt,this.simultaneous={},this.requireFail=[]}function K(e){return e&mt?"cancel":e&pt?"end":e&ft?"move":e&ht?"start":""}function Q(e){return e==qe?"down":e==He?"up":e==Me?"left":e==Fe?"right":""}function Z(e,t){var n=t.manager;return n?n.get(e):e}function ee(){J.apply(this,arguments)}function te(){ee.apply(this,arguments),this.pX=null,this.pY=null}function ne(){ee.apply(this,arguments)}function re(){J.apply(this,arguments),this._timer=null,this._input=null}function ie(){ee.apply(this,arguments)}function oe(){ee.apply(this,arguments)}function se(){J.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function ae(e,t){return t=t||{},t.recognizers=m(t.recognizers,ae.defaults.preset),new ce(e,t)}function ce(e,t){this.options=he({},ae.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.element=e,this.input=S(this),this.touchAction=new Y(this,this.options.touchAction),ue(this,!0),l(this.options.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function ue(e,t){var n=e.element;n.style&&l(e.options.cssProps,function(e,r){n.style[E(n.style,r)]=t?e:""})}function le(e,t){var n=o.createEvent("Event");n.initEvent(e,!0,!0),n.gesture=t,t.target.dispatchEvent(n)}var he,fe=["","webkit","Moz","MS","ms","o"],pe=o.createElement("div"),de="function",me=Math.round,ge=Math.abs,ve=Date.now;he="function"!=typeof Object.assign?function(e){if(e===a||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var r=arguments[n];if(r!==a&&null!==r)for(var i in r)r.hasOwnProperty(i)&&(t[i]=r[i])}return t}:Object.assign;var ye=h(function(e,t,n){for(var r=Object.keys(t),i=0;i<r.length;)(!n||n&&e[r[i]]===a)&&(e[r[i]]=t[r[i]]),i++;return e},"extend","Use `assign`."),be=h(function(e,t){return ye(e,t,!0)},"merge","Use `assign`."),we=1,xe=/mobile|tablet|ip(ad|hone|od)|android/i,ke="ontouchstart"in i,Te=E(i,"PointerEvent")!==a,Ee=ke&&xe.test(navigator.userAgent),Ce="touch",_e="pen",Ae="mouse",Se="kinect",je=25,Oe=1,De=2,Ie=4,Ne=8,Pe=1,Me=2,Fe=4,He=8,qe=16,Le=Me|Fe,Re=He|qe,$e=Le|Re,We=["x","y"],Be=["clientX","clientY"];A.prototype={handler:function(){},init:function(){this.evEl&&g(this.element,this.evEl,this.domHandler),this.evTarget&&g(this.target,this.evTarget,this.domHandler),this.evWin&&g(_(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&v(this.element,this.evEl,this.domHandler),this.evTarget&&v(this.target,this.evTarget,this.domHandler),this.evWin&&v(_(this.element),this.evWin,this.domHandler)}};var Ge={mousedown:Oe,mousemove:De,mouseup:Ie},ze="mousedown",Ue="mousemove mouseup";f($,A,{handler:function(e){var t=Ge[e.type];t&Oe&&0===e.button&&(this.pressed=!0),t&De&&1!==e.which&&(t=Ie),this.pressed&&this.allow&&(t&Ie&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:Ae,srcEvent:e}))}});var Xe={pointerdown:Oe,pointermove:De,pointerup:Ie,pointercancel:Ne,pointerout:Ne},Ye={2:Ce,3:_e,4:Ae,5:Se},Ve="pointerdown",Je="pointermove pointerup pointercancel";i.MSPointerEvent&&!i.PointerEvent&&(Ve="MSPointerDown",Je="MSPointerMove MSPointerUp MSPointerCancel"),f(W,A,{handler:function(e){var t=this.store,n=!1,r=e.type.toLowerCase().replace("ms",""),i=Xe[r],o=Ye[e.pointerType]||e.pointerType,s=o==Ce,a=x(t,e.pointerId,"pointerId");i&Oe&&(0===e.button||s)?0>a&&(t.push(e),a=t.length-1):i&(Ie|Ne)&&(n=!0),0>a||(t[a]=e,this.callback(this.manager,i,{pointers:t,changedPointers:[e],pointerType:o,srcEvent:e}),n&&t.splice(a,1))}});var Ke={touchstart:Oe,touchmove:De,touchend:Ie,touchcancel:Ne},Qe="touchstart",Ze="touchstart touchmove touchend touchcancel";f(B,A,{handler:function(e){var t=Ke[e.type];if(t===Oe&&(this.started=!0),this.started){var n=G.call(this,e,t);t&(Ie|Ne)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:Ce,srcEvent:e})}}});var et={touchstart:Oe,touchmove:De,touchend:Ie,touchcancel:Ne},tt="touchstart touchmove touchend touchcancel";f(z,A,{handler:function(e){var t=et[e.type],n=U.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:Ce,srcEvent:e})}}),f(X,A,{handler:function(e,t,n){var r=n.pointerType==Ce,i=n.pointerType==Ae;if(r)this.mouse.allow=!1;else if(i&&!this.mouse.allow)return;t&(Ie|Ne)&&(this.mouse.allow=!0),this.callback(e,t,n)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var nt=E(pe.style,"touchAction"),rt=nt!==a,it="compute",ot="auto",st="manipulation",at="none",ct="pan-x",ut="pan-y";Y.prototype={set:function(e){e==it&&(e=this.compute()),rt&&this.manager.element.style&&(this.manager.element.style[nt]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return l(this.manager.recognizers,function(t){d(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),V(e.join(" "))},preventDefaults:function(e){if(!rt){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)return void t.preventDefault();var r=this.actions,i=b(r,at),o=b(r,ut),s=b(r,ct);if(i){var a=1===e.pointers.length,c=e.distance<2,u=e.deltaTime<250;if(a&&c&&u)return}if(!s||!o)return i||o&&n&Le||s&&n&Re?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var lt=1,ht=2,ft=4,pt=8,dt=pt,mt=16,gt=32;J.prototype={defaults:{},set:function(e){return he(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(u(e,"recognizeWith",this))return this;var t=this.simultaneous;return e=Z(e,this),t[e.id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return u(e,"dropRecognizeWith",this)?this:(e=Z(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(u(e,"requireFailure",this))return this;var t=this.requireFail;return e=Z(e,this),-1===x(t,e)&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(u(e,"dropRequireFailure",this))return this;e=Z(e,this);var t=x(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){function t(t){n.manager.emit(t,e)}var n=this,r=this.state;pt>r&&t(n.options.event+K(r)),t(n.options.event),e.additionalEvent&&t(e.additionalEvent),r>=pt&&t(n.options.event+K(r))},tryEmit:function(e){return this.canEmit()?this.emit(e):void(this.state=gt)},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(gt|lt)))return!1;e++}return!0},recognize:function(e){var t=he({},e);return d(this.options.enable,[this,t])?(this.state&(dt|mt|gt)&&(this.state=lt),this.state=this.process(t),void(this.state&(ht|ft|pt|mt)&&this.tryEmit(t))):(this.reset(),void(this.state=gt))},process:function(e){},getTouchAction:function(){},reset:function(){}},f(ee,J,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,r=t&(ht|ft),i=this.attrTest(e);return r&&(n&Ne||!i)?t|mt:r||i?n&Ie?t|pt:t&ht?t|ft:ht:gt}}),f(te,ee,{defaults:{event:"pan",threshold:10,pointers:1,direction:$e},getTouchAction:function(){var e=this.options.direction,t=[];return e&Le&&t.push(ut),e&Re&&t.push(ct),t},directionTest:function(e){var t=this.options,n=!0,r=e.distance,i=e.direction,o=e.deltaX,s=e.deltaY;return i&t.direction||(t.direction&Le?(i=0===o?Pe:0>o?Me:Fe,n=o!=this.pX,r=Math.abs(e.deltaX)):(i=0===s?Pe:0>s?He:qe,n=s!=this.pY,r=Math.abs(e.deltaY))),e.direction=i,n&&r>t.threshold&&i&t.direction},attrTest:function(e){return ee.prototype.attrTest.call(this,e)&&(this.state&ht||!(this.state&ht)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=Q(e.direction);t&&(e.additionalEvent=this.options.event+t),this._super.emit.call(this,e)}}),f(ne,ee,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[at]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&ht)},emit:function(e){if(1!==e.scale){var t=e.scale<1?"in":"out";e.additionalEvent=this.options.event+t}this._super.emit.call(this,e)}}),f(re,J,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[ot]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,r=e.distance<t.threshold,i=e.deltaTime>t.time;if(this._input=e,!r||!n||e.eventType&(Ie|Ne)&&!i)this.reset();else if(e.eventType&Oe)this.reset(),this._timer=c(function(){this.state=dt,this.tryEmit()},t.time,this);else if(e.eventType&Ie)return dt;return gt},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===dt&&(e&&e.eventType&Ie?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=ve(),this.manager.emit(this.options.event,this._input)))}}),f(ie,ee,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[at]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&ht)}}),f(oe,ee,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Le|Re,pointers:1},getTouchAction:function(){return te.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return n&(Le|Re)?t=e.overallVelocity:n&Le?t=e.overallVelocityX:n&Re&&(t=e.overallVelocityY),this._super.attrTest.call(this,e)&&n&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers==this.options.pointers&&ge(t)>this.options.velocity&&e.eventType&Ie},emit:function(e){var t=Q(e.offsetDirection);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),f(se,J,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[st]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,r=e.distance<t.threshold,i=e.deltaTime<t.time;if(this.reset(),e.eventType&Oe&&0===this.count)return this.failTimeout();if(r&&i&&n){if(e.eventType!=Ie)return this.failTimeout();var o=this.pTime?e.timeStamp-this.pTime<t.interval:!0,s=!this.pCenter||H(this.pCenter,e.center)<t.posThreshold;this.pTime=e.timeStamp,this.pCenter=e.center,s&&o?this.count+=1:this.count=1,this._input=e;var a=this.count%t.taps;if(0===a)return this.hasRequireFailures()?(this._timer=c(function(){this.state=dt,this.tryEmit()},t.interval,this),ht):dt}return gt},failTimeout:function(){return this._timer=c(function(){this.state=gt},this.options.interval,this),gt},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==dt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),ae.VERSION="2.0.6",ae.defaults={domEvents:!1,touchAction:it,enable:!0,inputTarget:null,inputClass:null,preset:[[ie,{enable:!1}],[ne,{enable:!1},["rotate"]],[oe,{direction:Le}],[te,{direction:Le},["swipe"]],[se],[se,{event:"doubletap",taps:2},["tap"]],[re]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var vt=1,yt=2;ce.prototype={set:function(e){return he(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?yt:vt},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var n,r=this.recognizers,i=t.curRecognizer;(!i||i&&i.state&dt)&&(i=t.curRecognizer=null);for(var o=0;o<r.length;)n=r[o],t.stopped===yt||i&&n!=i&&!n.canRecognizeWith(i)?n.reset():n.recognize(e),!i&&n.state&(ht|ft|pt)&&(i=t.curRecognizer=n),o++}},get:function(e){if(e instanceof J)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(u(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(u(e,"remove",this))return this;if(e=this.get(e)){var t=this.recognizers,n=x(t,e);-1!==n&&(t.splice(n,1),this.touchAction.update())}return this},on:function(e,t){var n=this.handlers;return l(w(e),function(e){n[e]=n[e]||[],n[e].push(t)}),this},off:function(e,t){var n=this.handlers;return l(w(e),function(e){t?n[e]&&n[e].splice(x(n[e],t),1):delete n[e]}),this},emit:function(e,t){this.options.domEvents&&le(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var r=0;r<n.length;)n[r](t),r++}},destroy:function(){this.element&&ue(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},he(ae,{INPUT_START:Oe,INPUT_MOVE:De,INPUT_END:Ie,INPUT_CANCEL:Ne,STATE_POSSIBLE:lt,STATE_BEGAN:ht,STATE_CHANGED:ft,STATE_ENDED:pt,STATE_RECOGNIZED:dt,STATE_CANCELLED:mt,STATE_FAILED:gt,DIRECTION_NONE:Pe,DIRECTION_LEFT:Me,DIRECTION_RIGHT:Fe,DIRECTION_UP:He,DIRECTION_DOWN:qe,DIRECTION_HORIZONTAL:Le,DIRECTION_VERTICAL:Re,DIRECTION_ALL:$e,Manager:ce,Input:A,TouchAction:Y,TouchInput:z,MouseInput:$,PointerEventInput:W,TouchMouseInput:X,SingleTouchInput:B,Recognizer:J,AttrRecognizer:ee,Tap:se,Pan:te,Swipe:oe,Pinch:ne,Rotate:ie,Press:re,on:g,off:v,each:l,merge:be,extend:ye,assign:he,inherit:f,bindFn:p,prefixed:E});var bt="undefined"!=typeof i?i:"undefined"!=typeof self?self:{};bt.Hammer=ae,r=function(){return ae}.call(t,n,t,e),!(r!==a&&(e.exports=r))}(window,document,"Hammer")},function(e,t){e.exports='[\n	{\n		"id": 1,\n		"title": "Cron (job scheduler)",\n		"description": "It comes from the Greek word for time, chronos (χρόνος). Chronos is the personification of time in early Greek mythology and literature. He later appears in the Renaissance as Father Time.",\n		"categories": [\n			"OS",\n			"unix",\n			"linux",\n			"open source"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 2,\n		"title": "Daemon",\n		"description": "The term coined by programmers of MIT\'s Project MAC, was inspired by the physicist James Clerk Maxwell\'s demon. It originated as an imaginary being from a thought experiment that constantly works in the background sorting molecules. In Greek mythology, a daemon is a supernatural being working in the background, with no particular bias towards good or evil. The daemon concept was subsequently adopted by Unix systems, however, BSD and some of its derivatives have used a Christian interpretation of the mythological deamon as their mascot rather than a Greek daemon.",\n		"categories": [\n			"OS",\n			"unix",\n			"linux",\n			"open source"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 3,\n		"title": "Polymorphism",\n		"description": "In programming languages and type theory, polymorphism is the provision of a single interface to entities of different types. Polymorphism comes from the greek words, polys (πολύς), meaning \\"much\\" or \\"many\\" and morphē (μορφή), meaning \\"form\\" or \\"shape\\".",\n		"categories": [\n			"programming",\n			"coding"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 4,\n		"title": "(Apache) Cassandra",\n		"description": "Apache Cassandra was named after Cassandra (Greek: Κασσάνδρα, also Κασάνδρα), daughter of King Priam and Queen Hecuba of Troy. A common version of her story is that Apollo gave her the power of prophecy in order to seduce her, but when she spurned his advances, he spat into her mouth to ensure that Cadandra’s prophesies fell on deaf ears.",\n		"categories": [\n			"open source",\n			"databases",\n			"big data",\n			"noSQL"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 5,\n		"title": "Pseudo",\n		"description": "The prefix pseudo comes from pseudes (ψευδής,), meaning \\"lying\\" or \\"false\\". The term refers to something which appears, on the surface, to be one thing, but is actually another. Pseudo may connote coincidence, imitation, intentional deception, or a combination thereof.",\n		"categories": [\n			"programming",\n			"coding",\n			"CSS"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 6,\n		"title": "Trojan horse",\n		"description": "The term comes from the Ancient Greek story of the wooden horse that was used by the Greek troops to invade Troy by stealth from within the city’s walls.",\n		"categories": [\n			"social engineering",\n			"program"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 7,\n		"title": "Technology",\n		"description": "Technology derives from the Greek words techne (τέχνη), meaning art, skill or sleight of hand and logia (λογία), which refers to a collection of techniques, skills and processes used in the production of goods, services or in the accomplishment of objectives. It is easy to see how these concepts apply to our contemporary understanding of technology.",\n		"categories": [\n			"science"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 8,\n		"title": "Kerberos (protocol)",\n		"description": "The protocol was named after Kerberos (or Cerberus) in Greek mythology, the ferocious three-headed guard dog of Hades. Its designers conceived it primarily as a client–server model and it provides mutual authentication - both the user and the server verify each other\'s identity.",\n		"categories": [\n			"networking",\n			"authentication protocol"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 9,\n		"title": "Skeuomorph – Skeuomorphism",\n		"description": "The term skeuomorph is compounded from the Greek: skéuos (σκεῦος), meaning \\"container\\" or \\"tool\\", and morphḗ (μορφή), \\"shape\\". A skeuomorph is a derivative object that retains ornamental design cues from structures that were necessary in the original, like a software calendar that imitates the appearance of binding on a paper desk calendar. Skeuomorph can be used to describe computer and mobile interfaces.",\n		"categories": [\n			"design",\n			"interface"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 10,\n		"title": "Eclipse",\n		"description": "The term eclipse is derived from the ancient Greek ékleipsis (ἔκλειψις), which means \\"the abandonment, downfall, or darkening of a heavenly body\\". Eclipse software, initially developed by IBM, is primarily used to produce Java applications. Many versions of Eclipse have been named after a celestial bodies, such as Juno, Luna and Mars.",\n		"categories": [\n			"IDE",\n			"programming",\n			"coding",\n			"software",\n			"Java"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 11,\n		"title": "Android",\n		"description": "The word was coined from the prefix andro- for \\"man\\" or \\"male\\" (ἀνδρ) and the suffix -oid \\"having the form or likeness of\\". It has recently come to refer to an operating system endorsed by Google, which has become a leader in the mobile device market.",\n		"categories": [\n			"OS",\n			"mobile",\n			"Google",\n			"open source"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 12,\n		"title": "Icon",\n		"description": "An icon, from the Greek eikōn (εἰκών) defined as \\"image\\", is generally a flat panel painting depicting religious figures or scenes. The term has been adapted to refer to a graphical user interface (GUI), which is the visual symbol identifying a command, file, directory or device.",\n		"categories": [\n			"GUI",\n			"interface"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 13,\n		"title": "Parameter",\n		"description": "Parameter comes from the ancient Greek words \\"para\\" (παρά), meaning \\"beside, subsidiary\\" and \\"metron\\" (μέτρον), meaning \\"measure\\". It commonly refers to a \\"characteristic, feature, or measurable factor that can help in defining a particular system\\". A parameter is an important element to consider in evaluation or comprehension of an event, project, or situation.",\n		"categories": [\n			"programming",\n			"coding"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 14,\n		"title": "Asymmetric",\n		"description": "Asymmetric originated from the ancient Greek word asummetría (ἀσυμμετρία), meaning \\"disproportion, deformity\\". It can be found in many computing-related topics such as asymmetric cryptography, asymmetric digital subscriber line (ADSL) in internet connectivity and asymmetric multiprocessing in computer architecture.",\n		"categories": [\n			"cryptography",\n			"internet connectivity",\n			"computing"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 15,\n		"title": "Synchronous – Asynchronous",\n		"description": "Synchronous, meaning \\"happening at the same time\\", is from the Greek word synkhronos (συγχρόνως). It is a compound word formed by syn- \\"together\\" and -khronos \\"time\\". Asynchronous has the opposite meaning.",\n		"categories": [\n			"computing",\n			"programming",\n			"coding",\n			"telecommunications",\n			"systems"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 16,\n		"title": "Anonymous",\n		"description": "Anonymity is derived from the Greek word anonymia (ἀνωνυμία), for \\"without a name\\" or \\"namelessness\\". In colloquial use, \\"anonymous\\" is used to describe situations where the acting person\'s name is unknown. Some writers have argued that namelessness, though technically correct, does not capture what is more centrally at stake in contexts of anonymity. The important idea here is that a person be unidentifiable, unreachable, or untraceable. Anonymity is seen as a technique, or a way of realizing, certain other values, such as privacy, or liberty.",\n		"categories": [\n			"hacking",\n			"programming",\n			"coding"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 17,\n		"title": "Mosaic (web browser)",\n		"description": "Mosaic is the art of creating images with an assemblage of small pieces of colored glass, stone, or other materials. It comes from the Greek word mouseion, \'place holy to the Muses,\' and may have been originally dedicated to the Muses. This applied art form shares a name with a discontinued early web browser credited with popularizing the World Wide Web. Mosaic or NCSA Mosaic was named for its support of multiple internet protocols and was also the first browser to display images.",\n		"categories": [\n			"software",\n			"browser"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 18,\n		"title": "Kubernetes",\n		"description": "The Greek word kubernetes, means \\"helmsman of a ship,\\" or, more metaphorically, \\"ruler\\", while the Latin translation of \\"kubernetes\\" is \\"gubernare\\", meaning \\"to rule\\".",\n		"categories": [\n			"open source",\n			"cluster",\n			"platform"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 19,\n		"title": "Python",\n		"description": "Python (Πύθων), the dragon of Delphi, was always represented in Greek sculpture and vase-paintings as a serpent. He presided at the Delphic oracle, which was thought to exist at the center of the Earth-mother cult of Gaia, \\"Earth\\". Greeks considered the site to be the center of the earth, and the center of Delphi was represented by a stone; the omphalos, or navel, which Python guarded.",\n		"categories": [\n			"programming language"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 20,\n		"title": "Meteor",\n		"description": "The root word meteor comes from the Greek meteōros (μετέωρος), meaning \\"high in the air\\".",\n		"categories": [\n			"javascript",\n			"framework"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 21,\n		"title": "Hyper (text, link, etc.)",\n		"description": "The English prefix hyper- comes from the Greek prefix \\"ὑπερ-\\" and means \\"over\\" or \\"beyond\\" and signifies the overcoming of the previous constraints. It has similar linguistic roots as the prefix \\"super-\\" which comes from Latin.",\n		"categories": [\n			"internet",\n			"web",\n			"networking"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 22,\n		"title": "Graphics",\n		"description": "The word graphics comes from the Greek graphikos (γραφικός), for \\"something written\\", like an autograph, for example. The contemporary meaning of the word graphics is \\"visual images or designs on some surface, such as a wall, canvas, screen, paper, or stone to inform, illustrate, or entertain\\".",\n		"categories": [\n			"GUI",\n			"interface"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 23,\n		"title": "Peripheral",\n		"description": "A peripheral is a device that is used to put information into or get information out of the computer. Peripheral comes from the ancient Greek words periphéreia (περιφέρεια), meaning \\"the line around the circle, circumference, part of a circle, an arc, the outer surface\\" and phérō (φέρω) \\"‎bear, carry\\".",\n		"categories": [\n			"hardware"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 24,\n		"title": "Delphi",\n		"description": "In myths, the site of Delphi (Δελφοί) was believed to be the center of the \\"Earth\\" (\\"Gaia\\"),  grandmother of Zeus. People consulted the Delphic oracle Pythia (always a woman), on everything from important matters of public policy to personal affairs. The Pythia and priests of Apollo\'s temple kept very detailed records of their visitors, kind of like an ancient database. Delphi was originally one of many codenames of a pre-release development tool project at Borland. Borland developer Danny Thorpe suggested Delphi as a codename in reference to the Oracle of Delphi. One of the design goals of the product was to provide database connectivity to programmers as a key feature and a popular database package at the time was Oracle database; hence, \\"If you want to talk to [the] Oracle, go to Delphi\\".",\n		"categories": [\n			"programming language",\n			"database",\n			"software",\n			"IDE"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 25,\n		"title": "Homoiconic",\n		"description": "Derived from \\"homo\\" (όμο) meaning the same and \\"icon\\" (εικών) meaning representation. A progamming language is said to be homoiconic when it shares the same representation for code and data. A well-known example is LISP, where the primary primitive data structure is the list and programs are written as lists. As such, code can be manipulated as if it was data and vice-versa",\n		"categories": [\n			"programming"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 26,\n		"title": "Cryptography",\n		"description": "Derived from kryptós (κρυπτός) for \\"hidden, secret\\" and graphein (γράφειν) for \\"writing\\". Cryptography is the practice and study of techniques for secure communication in the presence of third parties.",\n		"categories": [\n			"security",\n			"communication",\n			"software"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Cryptography"\n		]\n	},\n	{\n		"id": 27,\n		"title": "Steganography",\n		"description": "Combines the words steganos (στεγανός), meaning \\"covered, concealed, or protected\\", and graphein (γράφειν) meaning \\"writing\\". Steganography is the practice of concealing a file, message, image or video within another file.",\n		"categories": [\n			"security",\n			"communication"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Steganography"\n		]\n	},\n	{\n		"id": 28,\n		"title": "Entropy",\n		"description": "Comes from the word tropee (τροπή) which means \\"turning toward\\" or \\"transformation\\". Entropy is the randomness collected by an application for use in cryptography or other that requires random data. This randomness is often collected from hardware sources such as mouse movements or randomness generators.",\n		"categories": [\n			"cryptography",\n			"security",\n			"communication"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/entropy"\n		]\n	},\n	{\n		"id": 29,\n		"title": "Monolithic",\n		"description": "Derives from monólithos (μονόλιθος) which actually means \\"made of one stone\\". A software is called \\"monolithic\\" if it has a monolithic architecture, in which functionally distinguishable aspects are not separate components but are all integrated.",\n		"categories": [\n			"programming",\n			"architecture",\n			"software"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Monolith",\n			"http://dictionary.reference.com/browse/monolith"\n		]\n	},\n	{\n		"id": 30,\n		"title": "Authentication",\n		"description": "From the word authentikos (αυθεντικός) meaning \\"real, genuine\\", is the act of confirming the truth of an attribute of a single piece of data, for example an identity, claimed true by an entity.",\n		"categories": [\n			"programming",\n			"software",\n			"security"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Authentication"\n		]\n	},\n	{\n		"id": 31,\n		"title": "Mouse",\n		"description": "Comes from the word mees (μυς) which is the ancient Greek name of the rodent mouse. In the world of computing it\'s the name of a hardware device, the well-known source of input of a computer system.",\n		"categories": [\n			"peripheral",\n			"hardware"\n		],\n		"references": [\n			"http://dictionary.reference.com/browse/mouse",\n			"http://www.etymonline.com/index.php?term=mouse"\n		]\n	},\n	{\n		"id": 32,\n		"title": "Parallelism",\n		"description": "From the word parállelos (παράλληλος) which combines two words \\"παρά\\" + \\"άλληλος\\" meaning \\"along each other\\". Parallelism is a type of computation in which calculations are carried out simultaneously.",\n		"categories": [\n			"programming"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/parallel#Etymology"\n		]\n	},\n	{\n		"id": 33,\n		"title": "Isomorphism",\n		"description": "In mathematics, an isomorphism (from the Ancient Greek: ἴσος isos \\"equal\\", and μορφή morphe \\"form\\" or \\"shape\\") is a homomorphism (or more generally a morphism) that admits an inverse. Two mathematical objects are isomorphic if an isomorphism exists between them. In the development world there are a lot of isomorphic frameworks lately",\n		"categories": [\n			"programming"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 34,\n		"title": "Ephemeral",\n		"description": "Ephemerality (from Greek εφήμερος – ephemeros, literally \\"lasting only one day\\") is the concept of things being transitory, existing only briefly. An ephemeral port is a short-lived transport protocol port for Internet Protocol (IP) communications allocated automatically from a predefined range by the IP software",\n		"categories": [\n			"networking"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 35,\n		"title": "Cube (OLAP)",\n		"description": "In computer science and BI an OLAP Cube is a collection of Dimensions, Measures and Hierarchies that are preprocessed and stored in a way that allows data to appear instantaneously when a user makes his/her analysis. The term cube is derived from \\"kubos\\" (κύβος). In ancient greek, kubos was a die. Later on the meaning expanded to many cube-shaped objects.",\n		"categories": [\n			"big data",\n			"databases",\n			"data-warehouse",\n			"business intalligence"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 36,\n		"title": "Schema",\n		"description": "The word schema comes from the Greek word σχήμα (skhēma), which means shape, or more generally, plan. A database schema describes the structure of its database system.",\n		"categories": [\n			"databases"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 37,\n		"title": "(Adobe) Acrobat",\n		"description": "Adobe Acrobat is a family of application software and Web services developed by Adobe Systems to view, create, manipulate, print and manage files in Portable Document Format (PDF). Based on ancient Greek word ἀκροβάτης‎ (akrobátēs, \\"walking on tiptoe, climbing aloft\\").",\n		"categories": [\n			"software"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 38,\n		"title": "Alpha / Beta",\n		"description": "A software release life cycle contains the \\"alpha\\" and \\"beta\\" stages of development. The alpha phase of the release life cycle is the first phase to begin software testing (alpha is the first letter of the Greek alphabet, used also as the number 1). Beta, named after the second letter of the Greek alphabet, is the software development phase following alpha. Beta phase generally begins when the software is feature complete but likely to contain a number of known or unknown bugs.",\n		"categories": [\n			"software",\n			"development"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 39,\n		"title": "Disk (or disc)",\n		"description": "From Ancient Greek δίσκος (dískos, \\"a circular plate suited for hurling\\"), from δικεῖν ‎(dikeîn, \\"to hurl, to launch\\").",\n		"categories": [\n			"hardware"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 40,\n		"title": "Program",\n		"description": "A computer program is a collection of instructions that performs a specific task when executed by a computer. The word program comes from Ancient Greek πρόγραμμα ‎(prógramma, \\"a written public notice, an edict\\").",\n		"categories": [\n			"hardware"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 41,\n		"title": "(Google) Chrome / Chromium",\n		"description": "Google Chrome / Chromium are web browsers developed by Google. Their names are derived from the Greek word χρῶμα, chrōma, meaning color.",\n		"categories": [\n			"software",\n			"browser"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 42,\n		"title": "Automaton",\n		"description": "The word \\"automaton\\" is the latinization of the Greek αὐτόματον, automaton, \\"acting of one\'s own will\\". An automaton (plural: automata or automatons) is a self-operating machine, or a machine or control mechanism designed to follow automatically a predetermined sequence of operations, or respond to predetermined instructions.",\n		"categories": [\n			"hardware"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 43,\n		"title": "Cyber",\n		"description": "The prefix cyber- is derived from \\"cybernetic,\\" which comes from the Greek word κυβερνητικός meaning skilled in steering or governing. It is used in the terms cyberspace, cyberpunk, cybergoth, cyberlaw, cybercrime, cyberwarfare, cyberterrorism, cybersex, and cyberbullying, among others.",\n		"categories": [\n			"internet"\n		],\n		"references": [\n		]\n	},\n	{\n		"id": 44,\n		"title": "Symfony (web application framework)",\n		"description": "Originates from the homophone word \\"Symphony\\" which is derived from the word συμφωνία (symphonia), meaning \\"agreement / concord of sound\\" and describes an extended musical composition in western classical music. Symfony is a \\"full-stack\\" PHP framework which promotes best practices and consists of a set of decoupled and reusable libraries. It implements the MVC architectural design pattern and many other design patterns like \\"Dependency Injection\\", \\"Data Access Object\\" and \\"Observer\\".",\n		"categories": [\n			"programming",\n			"frameworks"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Symphony#Origins",\n			"http://symfony.com/what-is-symfony"\n		]\n	},\n	{\n		"id": 45,\n		"title": "Atomicity (database systems)",\n		"description": "Atomicity comes from the word άτομος (atomos) which means \\"indivisible\\". It\'s one of the ACID properties that guarantee transaction reliability. Atomicity requires that each transaction must be \\"all or nothing\\", so that if one part of the transaction fails, the entire transaction fails too and the database state is left unchanged. Also the series of operations cannot be divided apart and executed partially from each other, which makes the series of operations \\"indivisible\\", hence the name.",\n		"categories": [\n			"databases"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Atomicity_(database_systems)"\n		]\n	},\n	{\n		"id": 46,\n		"title": "Delta (differencing)",\n		"description": "Δέλτα (delta) is a letter of the Greek alphabet (Δ or δ). Delta differencing is a way of storing or transmitting file differences rather than complete files. Deltas, for example, are the changes after a full backup. The differences are stored in files called deltas. As a backup approach saves bandwidth, reduces redundancy and storage. You can also find deltas on the deployment process of an application that requires database changes.",\n		"categories": [\n			"backup",\n			"databases"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Delta_encoding"\n		]\n	},\n	{\n		"id": 47,\n		"title": "Syntax",\n		"description": "The word syntax comes from Ancient Greek: σύνταξις \\\\\\"coordination\\\\\\", which consists of σύν syn, \\\\\\"together,\\\\\\" and τάξις táxis, \\\\\\"an ordering\\\\\\".\\nIn computer science, the syntax of a computer language is the set of rules that defines the combinations of symbols that are considered to be a correctly structured document or fragment in that language.",\n		"categories": [\n			"programming"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Syntax_(programming_languages)",\n			"https://en.wikipedia.org/wiki/Syntax"\n		]\n	},\n	{\n		"id": 48,\n		"title": "Semantics",\n		"description": "Semantics (from Ancient Greek: σημαντικός sēmantikós, \\\\\\"significant\\\\\\") is the study of meaning. In computer science, the term semantics refers to the meaning of languages, as opposed to their form (syntax).",\n		"categories": [\n			"programming"\n		],\n		"references": [\n			"https://en.wikipedia.org/wiki/Semantics"\n		]\n	},\n	{\n		"id": 49,\n		"title": "Kilo",\n		"description": "Derived from ancient greek χίλιοι (chilioi ) \\\\\\"one thousand\\\\\\". In computing it refers to multiplying the unit to which it is attached by 2^10 (1024).",\n		"categories": [\n			"computing"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/kilo-",\n			"https://en.wikipedia.org/wiki/Kilo-"\n		]\n	},\n	{\n		"id": 50,\n		"title": "Paragon",\n		"description": "From Ancient Greek παρακονάω ‎(parakonáō, “I sharpen, whet”). \\nThe Intel Paragon is a discontinued series of massively parallel supercomputers that was produced by Intel in the 1990s.",\n		"categories": [\n			"hardware",\n			" supercomputer"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/paragon",\n			" https://en.wikipedia.org/wiki/Intel_Paragon"\n		]\n	},\n	{\n		"id": 51,\n		"title": "Titan",\n		"description": "From Ancient Greek Τιτάν ‎(Titán), a race of giant gods in Greek mythology that preceded and was overthrown by the Olympian gods.\\nTitan is a supercomputer built by Cray at Oak Ridge National Laboratory for use in a variety of science projects. It uses graphics processing units (GPUs) in addition to conventional central processing units (CPUs).\\nTitan is also the name of the prototype of the Atlas 2 computer developed by Ferranti and the University of Cambridge Mathematical Laboratory in Cambridge, England. \\nFacebook also gave the name Titan to it\\\\\'s modern messaging system unveiled in 2010.",\n		"categories": [\n			"hardware",\n			"supercomputers",\n			"software"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/Titan",\n			"https://en.wikipedia.org/wiki/Titan_(supercomputer)",\n			"https://en.wikipedia.org/wiki/Titan_(computer)",\n			"http://www.digitaltrends.com/computing/facebooks-project-titan-is-the-modern-messaging-system-but-is-not-an-e-mail-killer/"\n		]\n	},\n	{\n		"id": 52,\n		"title": "Octet",\n		"description": "From ancient Greek ὀκτώ ‎(oktṓ). An octet is a unit of digital information in computing and telecommunications that consists of eight bits. The term is often used when the term byte might be ambiguous, as historically there was no standard definition for the size of the byte.\\nOctets are used in the representation of Internet Protocol computer network addresses.",\n		"categories": [\n			"computing",\n			"networking"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/octo",\n			"https://en.wikipedia.org/wiki/Octet_(computing)"\n		]\n	},\n	{\n		"id": 53,\n		"title": "Neural",\n		"description": "From Ancient Greek νεῦρον ‎(neûron, “a sinew, nerve”) +‎ -al. In computing it means something that is modelled on the arrangement of neurons in the brain.\\nNeural network software is used to simulate, research, develop and apply artificial neural networks, biological neural networks and, in some cases, a wider array of adaptive systems.",\n		"categories": [\n			"artifical intelligence",\n			"networking",\n			"software",\n			"machine learning"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/neural",\n			"https://en.wikipedia.org/wiki/Artificial_neural_network"\n		]\n	},\n	{\n		"id": 54,\n		"title": "Protocol",\n		"description": "From Byzantine Greek πρωτόκολλον ‎(“first sheet glued onto a manuscript”), from πρῶτος ‎(prôtos, “first”) + κόλλα ‎(kólla, “glue”). \\n In telecommunications, a communications protocol is a system of rules that allow two or more entities of a communications system to transmit information via any kind of variation of a physical quantity.",\n		"categories": [\n			"networking",\n			"communications"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/protocol",\n			"https://en.wikipedia.org/wiki/Communications_protocol"\n		]\n	},\n	{\n		"id": 55,\n		"title": "Method",\n		"description": "From Ancient Greek μέθοδος ‎(méthodos, “pursuit of knowledge, investigation, mode of prosecuting such inquiry, system”). \\nIn object oriented programming it describes a subroutine or function belonging to a class or object.",\n		"categories": [\n			"programming"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/method"\n		]\n	},\n	{\n		"id": 56,\n		"title": "Topology",\n		"description": "From Ancient Greek τόπος ‎(tópos, “place, locality”) + -(o)logy (“study of”, \\\\\\"a branch of knowledge\\\\\\"). \\nIn computing topology means the arrangement of nodes in a communications network.",\n		"categories": [\n			"networking",\n			"hardware",\n			"communications"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/topology"\n		]\n	},\n	{\n		"id": 57,\n		"title": "Diagnostics",\n		"description": "From Greek diagnōstikos ‘able to distinguish’, from diagignōskein ‘distinguish’. Any tool or technique, usually a special piece of software, used to find the root of a hardware or software problem and assist with it\\\\\'s fixing.",\n		"categories": [\n			"software"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/diagnosis",\n			"https://en.wiktionary.org/wiki/diagnostic#English"\n		]\n	},\n	{\n		"id": 58,\n		"title": "Hexadecimal",\n		"description": "The word hexadecimal is composed of hexa-, derived from the Greek έξ (hex) for six, and -decimal, derived from the Latin for tenth.\\nIn mathematics and computing, hexadecimal (also base 16, or hex) is a positional numeral system with a radix, or base, of 16.",\n		"categories": [\n			"computing"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/hexa-#English",\n			"https://en.wikipedia.org/wiki/Hexadecimal"\n		]\n	},\n	{\n		"id": 59,\n		"title": "Giga",\n		"description": "From Ancient Greek γίγας ‎(gígas, “giant”). In computing it is a prefix that means multiplying the unit to which it is attached by 2^30 or 1,073,741,824.",\n		"categories": [\n			"computing"\n		],\n		"references": [\n			"https://en.wiktionary.org/wiki/giga-"\n		]\n	}\n]';
},function(e,t){e.exports='<header>\n	<div class="container">\n		<h1><%= title %></h1>\n		<ul class="social-links">\n			<li>\n				<a class="ion-social-twitter"\n					href="https://twitter.com/intent/tweet?\n					text=Did%20you%20know%20that%20%22<%= title %>%22%20is%20a%20greek%20word%3F%20&amp;\n					url=http%3A%2F%2Fgreekintech.com%2F<%= id %>%2F<%= urlFriendlyTitle %>&amp;\n					hashtags=greekintech"\n					data-count="none">\n				</a>\n			</li>\n			<li>\n				<a class="ion-social-facebook"\n					href="https://www.facebook.com/sharer/sharer.php\n					?u=http://greekintech.com/#entry/<%= id %>/<%= urlFriendlyTitle %>">\n				</a>\n			</li>\n		</ul>\n	</div>\n</header>\n<p><%= description %></p>\n<footer>\n	<p class="tags-copy">Tags: </p>\n	<ul class="tags">\n		<% _.each(categories, function(category) { %>\n			<li><%= category %></li>\n		<% }) %>\n	</ul>\n\n	<% if (!_.isEmpty(references)) { %>\n		<p class="references-copy">References: </p>\n		<ul class="references">\n			<% _.each(references, function(reference) { %>\n				<li><a href="<%= reference %>" target="_blank"><%= reference %></a></li>\n			<% }) %>\n		</ul>\n	<% } %>\n</footer>'}]);
//# sourceMappingURL=data:application/json;base64,